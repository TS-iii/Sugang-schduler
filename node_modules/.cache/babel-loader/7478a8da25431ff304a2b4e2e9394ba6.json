{"ast":null,"code":"export class Node {\n  constructor(data) {\n    this.data = data;\n    this.children = [];\n    this.adault = null;\n    this.score = 0;\n  }\n\n  insert(data) {\n    const node = new Node(data);\n    node.adault = this;\n    node.score = node.adault.score + data.classscore; // 누적 학점\n\n    this.children.push(node);\n    node.num = this.children.length - 1;\n  }\n\n} //둘의 시간이 겹치는지 확인\n//안겹치면 true 반환\n\nexport const lookschedule = function (a, b) {\n  if (a.t1.length) {\n    if (b.t1.length) {\n      for (let i = 0; i < a.t1.length; i++) {\n        if (b.t1.indexOf(a.t1[i]) !== -1) return false;\n      }\n    }\n  }\n\n  if (a.t2.length) {\n    if (b.t2.length) {\n      for (let i = 0; i < a.t2.length; i++) {\n        if (b.t2.indexOf(a.t2[i]) !== -1) return false;\n      }\n    }\n  }\n\n  if (a.t3.length) {\n    if (b.t3.length) {\n      for (let i = 0; i < a.t3.length; i++) {\n        if (b.t3.indexOf(a.t3[i]) !== -1) return false;\n      }\n    }\n  }\n\n  if (a.t4.length) {\n    if (b.t4.length) {\n      for (let i = 0; i < a.t4.length; i++) {\n        if (b.t4.indexOf(a.t4[i]) !== -1) return false;\n      }\n    }\n  }\n\n  if (a.t5.length) {\n    if (b.t5.length) {\n      for (let i = 0; i < a.t5.length; i++) {\n        if (b.t5.indexOf(a.t5[i]) !== -1) return false;\n      }\n    }\n  }\n\n  return true;\n}; // 안겹친다는 가정이 필요\n// 안겹치고 이 함수를 사용하면 dst 시간표에 src가 추가됨. \n// 시간표와, 시간표에 넣을 과목을 dst, src 차례로 주면됨\n\nexport const insertTable = function (dst, src) {\n  for (let i = 0; i < src.keyword.length; i++) {\n    dst[src.keyword[i]] = dst[src.keyword[i]].concat(src[src.keyword[i]]);\n  }\n\n  ;\n};\nexport const composeTree = function (t, table) {\n  const root = new Node();\n  root.max = 0;\n  root.finalTable = [];\n\n  if (t === 'type1') {\n    //루트 바로 밑 1번째 자식들 구성\n    for (let i = 0; i < table.type1.length; i++) {\n      // let node= new Node(type1[i]);\n      root.insert(table.type1[i]);\n    }\n\n    for (let i = 0; i < table.type1.length; i++) {\n      search(root.children[i], 1, root);\n    }\n  } else if (t === 'type2') {\n    for (let i = 0; i < table.type2.length; i++) {\n      // let node= new Node(type1[i]);\n      root.insert(table.type2[i]);\n    }\n\n    for (let i = 0; i < table.type2.length; i++) {\n      search(root.children[i], 1, root);\n    }\n  } else if (t === 'type3') {\n    for (let i = 0; i < table.type3.length; i++) {\n      // let node= new Node(type1[i]);\n      root.insert(table.type3[i]);\n    }\n\n    for (let i = 0; i < table.type3.length; i++) {\n      search(root.children[i], 1, root);\n    }\n  }\n\n  return root;\n};\nexport const search = function (n, k, root) {\n  let num = 0;\n\n  for (let i = n.num + 1; i < n.adault.children.length; i++) {\n    if (n.data.classname !== n.adault.children[i].data.classname) {\n      if (lookschedule(n.data.classtime, n.adault.children[i].data.classtime)) {\n        n.insert(n.adault.children[i].data);\n        num++;\n      }\n    }\n  }\n\n  ;\n\n  if (num === 0) //지금 이 노드가 leaf라는 소리\n    {\n      if (root.max < k) {\n        root.max = k;\n        root.finalTable = [];\n        root.finalTable.push(n);\n      } else if (root.max === k) {\n        root.finalTable.push(n);\n      }\n\n      return;\n    } else {\n    for (let i = 0; i < num; i++) {\n      search(n.children[i], k + 1, root);\n    }\n  }\n};\nexport default Node;","map":{"version":3,"sources":["C:/Users/user/Desktop/ReactProject/sugang-scheduler/sugang-frontend/src/lib/tree/tree.js"],"names":["Node","constructor","data","children","adault","score","insert","node","classscore","push","num","length","lookschedule","a","b","t1","i","indexOf","t2","t3","t4","t5","insertTable","dst","src","keyword","concat","composeTree","t","table","root","max","finalTable","type1","search","type2","type3","n","k","classname","classtime"],"mappings":"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","sourcesContent":["\r\n\r\n\r\nexport class Node {\r\n\r\n    constructor(data){\r\n\r\n        this.data=data;\r\n        this.children=[];\r\n        this.adault=null;\r\n        this.score=0;\r\n    \r\n    }\r\n\r\n\r\n   insert(data){\r\n\r\n    const node=new Node(data);\r\n    node.adault=this;\r\n    \r\n    node.score=node.adault.score+data.classscore;  // 누적 학점\r\n\r\n    this.children.push(node);\r\n    node.num=this.children.length-1;\r\n\r\n    \r\n   }\r\n   \r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n//둘의 시간이 겹치는지 확인\r\n//안겹치면 true 반환\r\nexport const lookschedule= function(a,b){\r\n\r\n    if(a.t1.length)\r\n        {   \r\n            if(b.t1.length)\r\n            {\r\n                for(let i=0;i<a.t1.length;i++){\r\n                    \r\n                    if(b.t1.indexOf(a.t1[i])!==-1)\r\n                        return false;\r\n                        \r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    if(a.t2.length)\r\n    {   \r\n        if(b.t2.length)\r\n        {\r\n            for(let i=0;i<a.t2.length;i++){\r\n                \r\n                if(b.t2.indexOf(a.t2[i])!==-1)\r\n                    return false;\r\n                    \r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    if(a.t3.length)\r\n    {   \r\n        if(b.t3.length)\r\n        {\r\n            for(let i=0;i<a.t3.length;i++){\r\n                \r\n                if(b.t3.indexOf(a.t3[i])!==-1)\r\n                    return false;\r\n                    \r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    if(a.t4.length)\r\n    {   \r\n        if(b.t4.length)\r\n        {\r\n            for(let i=0;i<a.t4.length;i++){\r\n                \r\n                if(b.t4.indexOf(a.t4[i])!==-1)\r\n                    return false;\r\n                    \r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    if(a.t5.length)\r\n    {   \r\n        if(b.t5.length)\r\n        {\r\n            for(let i=0;i<a.t5.length;i++){\r\n                \r\n                if(b.t5.indexOf(a.t5[i])!==-1)\r\n                    return false;\r\n                    \r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return true;\r\n\r\n\r\n\r\n};\r\n\r\n\r\n\r\n// 안겹친다는 가정이 필요\r\n// 안겹치고 이 함수를 사용하면 dst 시간표에 src가 추가됨. \r\n// 시간표와, 시간표에 넣을 과목을 dst, src 차례로 주면됨\r\nexport const insertTable=function(dst,src){\r\n\r\n    \r\n    for(let i=0;i<src.keyword.length;i++){\r\n\r\n        dst[src.keyword[i]]=dst[src.keyword[i]].concat(src[src.keyword[i]]);\r\n        \r\n    };\r\n\r\n\r\n};\r\n\r\n\r\nexport const composeTree=function(t,table){\r\n\r\n  \r\n    const root= new Node();\r\n\r\n    root.max=0;\r\n    root.finalTable=[];\r\n\r\n    if(t==='type1')\r\n        {\r\n    //루트 바로 밑 1번째 자식들 구성\r\n    for(let i=0;i<table.type1.length;i++){\r\n\r\n        // let node= new Node(type1[i]);\r\n\r\n        root.insert(table.type1[i]);\r\n\r\n   \r\n      \r\n    }\r\n\r\n\r\n\r\n\r\n    for(let i=0;i<table.type1.length;i++){\r\n\r\n        search(root.children[i],1,root);\r\n       \r\n    }\r\n        }\r\n\r\n    else if(t==='type2'){\r\n\r\n        for(let i=0;i<table.type2.length;i++){\r\n\r\n            // let node= new Node(type1[i]);\r\n    \r\n            root.insert(table.type2[i]);\r\n    \r\n       \r\n          \r\n        }\r\n    \r\n    \r\n    \r\n    \r\n        for(let i=0;i<table.type2.length;i++){\r\n    \r\n            search(root.children[i],1,root);\r\n           \r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    else if(t==='type3'){\r\n\r\n        for(let i=0;i<table.type3.length;i++){\r\n\r\n            // let node= new Node(type1[i]);\r\n    \r\n            root.insert(table.type3[i]);\r\n    \r\n       \r\n          \r\n        }\r\n    \r\n        for(let i=0;i<table.type3.length;i++){\r\n    \r\n            search(root.children[i],1,root);\r\n           \r\n        }\r\n\r\n\r\n    }\r\n    \r\n\r\nreturn root;\r\n\r\n};\r\n\r\nexport const search=function(n,k,root){\r\n\r\n \r\n    let num=0;\r\n\r\n    for(let i=n.num+1;i<n.adault.children.length;i++){\r\n\r\n            if(n.data.classname!==n.adault.children[i].data.classname){\r\n\r\n            if(lookschedule(n.data.classtime,n.adault.children[i].data.classtime))\r\n                {\r\n                    n.insert(n.adault.children[i].data);\r\n                    num++;\r\n\r\n                }\r\n            }\r\n                   \r\n    };\r\n\r\n\r\n\r\n    if(num===0)      //지금 이 노드가 leaf라는 소리\r\n        {   \r\n        \r\n            if(root.max<k)\r\n            {\r\n                root.max=k;\r\n                \r\n                root.finalTable=[];\r\n                root.finalTable.push(n);\r\n\r\n               \r\n\r\n            }\r\n\r\n            else if (root.max===k)\r\n            {\r\n                    root.finalTable.push(n);\r\n                 \r\n            }\r\n            return;\r\n        }\r\n    else {\r\n\r\n        for(let i=0;i<num;i++)\r\n        {\r\n            search(n.children[i],k+1,root);\r\n\r\n        }\r\n\r\n    }\r\n\r\n};\r\n\r\n\r\nexport default Node;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}