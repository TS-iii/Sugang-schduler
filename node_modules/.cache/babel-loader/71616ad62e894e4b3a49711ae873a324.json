{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\ReactProject\\\\sugang-scheduler\\\\sugang-frontend\\\\src\\\\containers\\\\graph\\\\GraphContainers.js\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport Graphy from '../../component/graph/Graphy';\nimport { mainTree, lookschedule } from '../../lib/tree/tree1'; // 안겹친다는 가정이 필요\n// 안겹치고 이 함수를 사용하면 dst 시간표에 src가 추가됨. \n// 시간표와, 시간표에 넣을 과목을 dst, src 차례로 주면됨\n//const insertTable=function(dst,src)\n\nconst GraphContainer = () => {\n  //TdrawList랑 addlist id는 배열의 인덱스랑 같음 \n  const [TdrawList, setTdrawList] = useState([]); // 현재 신청된 목록들  (/graph 상단 목록에 영향)\n  //{data: , id: }\n\n  const [addlist, setaddlist] = useState([]); // 현재 추가 가능한 목록들 (/graph 하단 목록에 영향 )\n  // {data: id: }\n\n  const [makingdrawList, setmakingdrawList] = useState([]); // 현재 신청된 목록의 시간표 좌표 구현\n\n  const [allList, setallList] = useState([]);\n  const [nownum, setnownum] = useState(0);\n  const [click, setclick] = useState([]);\n  const [maindata, setmaindata] = useState([]);\n  const [subdata, setsubdata] = useState([]);\n  const [world, setworld] = useState(true); // const [first,setfirst]=useState(true);\n  // 대안 루트 (id)는 실패했을 경우 \n  //TdrawList에 의존적\n  // click에 의존적 \n\n  const NextRoot = id => {\n    let bb = [];\n    let tf = false;\n    let maindatas = [];\n    let data = TdrawList.find(c => c.id === id);\n\n    if (click.length === 0) {\n      maindatas = TdrawList.filter(c => c.id !== id);\n      bb.push(data);\n      tf = false;\n    } else {\n      for (let i = 0; i < click.length; i++) {\n        if (click[i].id !== id) {\n          bb.push(click[i]);\n        }\n      } // id가 있었음\n\n\n      if (bb.length !== click.length) {\n        tf = true;\n        maindatas = [...maindata, data];\n      } //id가 없었음 \n      else {\n          tf = false;\n          bb.push(data);\n          maindatas = TdrawList.filter(c => c.id !== id);\n        }\n    }\n\n    let kk = [];\n    if (tf === false) kk = TdrawList.filter(c => c.id !== id);else kk = TdrawList;\n    console.log(\"시작\"); //기존 고정맴버랑 실패된 과목 빼고 시간표짬.\n\n    const fflist = mainTree(Maintable, kk, bb);\n    let list = []; // 그리고 기존 고정맴버 추가\n\n    if (fflist.length === 0) list.push(kk);else {\n      for (let i = 0; i < fflist.length; i++) {\n        list.push(fflist[i].concat(kk));\n      }\n    }\n    setclick(bb, () => setmaindata(maindatas, () => setworld(false, () => setnownum(0, () => setallList(list))))); // 그리고 적용 setnownum이 적용된 후 setallList가 적용됨\n    // setworld(false,()=>setnownum(0,()=>setallList(list)));\n  }; // 현재 시간표에서 삭제 버튼 클릭시 함수 호출 \n\n\n  const Delete = id => {\n    const aa = TdrawList.filter(e => e.id !== id); // 일단 삭제할 id찾아서 지운배열을 aa에 전달\n\n    setTdrawList(aa); // 그리고 TdrawList에 적용\n\n    let addtemp = []; // 추가가능한 과목들 배열 만듬\n    // 여기서부터는 1,2,3순위 입력된 모든 과목들중에 aa에 있는 과목을 제외하고 추가로 신청 가능한 과목이 있는지 살펴봄.\n\n    for (let j = 0; j < type1.length; j++) {\n      // type1부터 살펴봄\n      let i = 0;\n\n      for (i = 0; i < aa.length; i++) // aa는 현재 선택된 시간표 \n      {\n        if (aa[i].classname === type1[j].classname) // 같은 과목은 동시 수강 못하므로 \n          break;\n        if (!lookschedule(aa[i].classtime, type1[j].classtime)) break; // 시간표가 중복되면 동시 수강 못하므로 \n      }\n\n      if (i === aa.length) {\n        // 최종적으로 수강 가능한 과목이면\n        addtemp.push(type1[j]); // addtemp에 넣음.\n      }\n    }\n\n    for (let j = 0; j < type2.length; j++) {\n      let i = 0;\n\n      for (i = 0; i < aa.length; i++) {\n        if (aa[i].classname === type2[j].classname) break;\n        if (!lookschedule(aa[i].classtime, type2[j].classtime)) break;\n      }\n\n      if (i === aa.length) {\n        addtemp.push(type2[j]);\n      }\n    }\n\n    for (let j = 0; j < type3.length; j++) {\n      let i = 0;\n\n      for (i = 0; i < aa.length; i++) {\n        if (aa[i].classname === type3[j].classname) break;\n        if (!lookschedule(aa[i].classtime, type3[j].classtime)) break;\n      }\n\n      if (i === aa.length) {\n        addtemp.push(type3[j]);\n      }\n    }\n\n    setaddlist(addtemp);\n  };\n\n  const Add = id => {\n    let aa = [];\n    let data = addlist.find(c => c.id === id);\n    if (TdrawList.length !== 0) // 과목 개수가 0이 아니면\n      aa = [...TdrawList, data]; // 기존 과목배열에 신규 과목 추가 \n    else aa.push(data); // 현재 과목 개수가 0이면 그냥 추가 \n\n    let bb = [];\n\n    for (let i = 0; i < addlist.length; i++) {\n      if (addlist[i].id !== id) {\n        if (addlist[i].classname !== data.classname) {\n          if (lookschedule(addlist[i].classtime, data.classtime)) {\n            bb.push(addlist[i]);\n          }\n        }\n      }\n    }\n\n    setaddlist(bb);\n    setTdrawList(aa);\n  };\n\n  const {\n    type1,\n    type2,\n    type3\n  } = useSelector(({\n    write\n  }) => ({\n    type1: write.type1,\n    type2: write.type2,\n    type3: write.type3\n  }));\n  const Maintable = {\n    type1,\n    type2,\n    type3\n  };\n  useEffect(() => makingDrawList(), [TdrawList]);\n  useEffect(() => finalprint(), [allList]); // 배열로 시간표 리스트만 넘기면됨 \n  // 얘는 TdrawList를 살펴보고 과목당 시간을 적절히 출력할 수 있게 숫자로 바꿔줌\n\n  const makingDrawList = useCallback(() => {\n    let makingTable = [];\n\n    for (let i = 0; i < TdrawList.length; i++) {\n      // 한 과목씩 살펴봄\n      for (let j = 0; j < TdrawList[i].classtime.keyword.length; j++) {\n        // 한 과목의 요일수\n        let day;\n\n        switch (TdrawList[i].classtime.keyword[j]) {\n          case 't1':\n            day = 5;\n            break;\n\n          case 't2':\n            day = 24;\n            break;\n\n          case 't3':\n            day = 43;\n            break;\n\n          case 't4':\n            day = 62;\n            break;\n\n          case 't5':\n            day = 81;\n            break;\n\n          default:\n            break;\n        }\n\n        let dayarr = TdrawList[i].classtime[TdrawList[i].classtime.keyword[j]]; // 요일 배열\n\n        let timeleng = dayarr.length * 3.5;\n        let time = 9 + (dayarr[0] - 2) * 3.5;\n        makingTable.push({\n          x: day,\n          y: time,\n          ycolor: timeleng,\n          color: \"#CEF6F5\",\n          text: TdrawList[i].classname\n        });\n      }\n    }\n\n    console.log(makingTable);\n    setmakingdrawList(makingTable);\n  }, [TdrawList]);\n\n  const Calculate = () => {\n    const fflist = mainTree(Maintable, [], []);\n    setnownum(0);\n    setworld(true);\n    setallList(fflist, () => console.log(\"씨발\")); // setnownum(0,()=>setworld(true,()=>setallList(fflist,()=>console.log(\"씨발\"))));\n  };\n\n  const finalprint = () => {\n    let kkk = [];\n\n    if (allList.length !== 0) {\n      for (let i = 0; i < allList[nownum].length; i++) {\n        let tt = allList[nownum][i];\n        kkk.push(tt);\n\n        if (world === false) {\n          if (!maindata.find(c => c.id === allList[nownum][i].id)) {\n            setsubdata(allList[nownum][i]);\n          }\n        }\n      }\n\n      for (let i = 0; i < click.length; i++) {\n        kkk.push(click[i]);\n      }\n\n      if (world === true) {\n        setmaindata(kkk);\n      }\n\n      setTdrawList(kkk);\n    }\n  };\n\n  const next = () => {\n    if (allList.length - 1 === nownum) {\n      setnownum(0);\n    } else {\n      setnownum(nownum + 1);\n    }\n\n    finalprint();\n  };\n\n  const previous = () => {\n    if (nownum > 0) {\n      setnownum(nownum - 1);\n      finalprint();\n    }\n  };\n\n  return React.createElement(Graphy, {\n    TdrawList: TdrawList,\n    Delete: Delete,\n    makingdrawList: makingdrawList,\n    Calculate: Calculate,\n    next: next,\n    previous: previous,\n    Add: Add,\n    addlist: addlist,\n    NextRoot: NextRoot,\n    click: click,\n    maindata: maindata,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445\n    },\n    __self: this\n  });\n};\n\nexport default GraphContainer;","map":{"version":3,"sources":["C:/Users/user/Desktop/ReactProject/sugang-scheduler/sugang-frontend/src/containers/graph/GraphContainers.js"],"names":["React","useState","useCallback","useEffect","useSelector","Graphy","mainTree","lookschedule","GraphContainer","TdrawList","setTdrawList","addlist","setaddlist","makingdrawList","setmakingdrawList","allList","setallList","nownum","setnownum","click","setclick","maindata","setmaindata","subdata","setsubdata","world","setworld","NextRoot","id","bb","tf","maindatas","data","find","c","length","filter","push","i","kk","console","log","fflist","Maintable","list","concat","Delete","aa","e","addtemp","j","type1","classname","classtime","type2","type3","Add","write","makingDrawList","finalprint","makingTable","keyword","day","dayarr","timeleng","time","x","y","ycolor","color","text","Calculate","kkk","tt","next","previous"],"mappings":"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","sourcesContent":["\r\nimport React , {useState,useCallback,useEffect} from 'react';\r\nimport {useSelector} from 'react-redux';\r\n\r\nimport Graphy from '../../component/graph/Graphy';\r\n\r\nimport  { mainTree,lookschedule} from '../../lib/tree/tree1';\r\n\r\n\r\n\r\n// 안겹친다는 가정이 필요\r\n// 안겹치고 이 함수를 사용하면 dst 시간표에 src가 추가됨. \r\n// 시간표와, 시간표에 넣을 과목을 dst, src 차례로 주면됨\r\n//const insertTable=function(dst,src)\r\n\r\n\r\n\r\nconst GraphContainer=()=>{\r\n\r\n\r\n\r\n    //TdrawList랑 addlist id는 배열의 인덱스랑 같음 \r\n    const [TdrawList,setTdrawList]=useState([]);    // 현재 신청된 목록들  (/graph 상단 목록에 영향)\r\n    //{data: , id: }\r\n    const [addlist,setaddlist]=useState([]);    // 현재 추가 가능한 목록들 (/graph 하단 목록에 영향 )\r\n    // {data: id: }\r\n\r\n    const [makingdrawList,setmakingdrawList]=useState([]); // 현재 신청된 목록의 시간표 좌표 구현\r\n\r\n    const [allList,setallList]=useState([]);    \r\n\r\n    const [nownum,setnownum]=useState(0);   \r\n\r\n\r\n    const [click,setclick]=useState([]);\r\n    const [maindata,setmaindata]=useState([]);\r\n    const [subdata,setsubdata]=useState([]);\r\n\r\n    const [world,setworld]=useState(true);\r\n\r\n    // const [first,setfirst]=useState(true);\r\n\r\n    \r\n    \r\n\r\n\r\n    // 대안 루트 (id)는 실패했을 경우 \r\n    \r\n    //TdrawList에 의존적\r\n    // click에 의존적 \r\n     \r\n    const NextRoot=(id)=>{\r\n        \r\n        let bb=[];\r\n\r\n\r\n        let tf=false;\r\n        \r\n        let maindatas=[];\r\n        let data=TdrawList.find(c=>c.id===id);\r\n\r\n        if(click.length===0)\r\n            {   \r\n               \r\n               maindatas=TdrawList.filter(c=>c.id!==id);\r\n                bb.push(data);\r\n             \r\n                tf=false;\r\n            }\r\n\r\n        else{\r\n\r\n        for(let i=0;i<click.length;i++){\r\n\r\n            \r\n            if(click[i].id!==id)\r\n                {\r\n                   bb.push(click[i]);\r\n\r\n                }\r\n            \r\n\r\n        }\r\n        \r\n        \r\n            // id가 있었음\r\n        if(bb.length!==click.length){\r\n                tf=true;\r\n               \r\n                  maindatas=[...maindata,data];\r\n                \r\n            \r\n        }\r\n\r\n        //id가 없었음 \r\n        else{\r\n            tf=false;\r\n          \r\n            bb.push(data);\r\n\r\n            maindatas=TdrawList.filter(c=>c.id!==id);\r\n        }\r\n\r\n         }\r\n\r\n\r\n         let kk=[];\r\n         if(tf===false)\r\n            kk=TdrawList.filter(c=>c.id!==id);\r\n        else \r\n            kk=TdrawList;\r\n\r\n       \r\n         \r\n        \r\n         console.log(\"시작\");\r\n       \r\n         //기존 고정맴버랑 실패된 과목 빼고 시간표짬.\r\n        const fflist=mainTree(Maintable,kk,bb);\r\n         \r\n        let list=[];\r\n         // 그리고 기존 고정맴버 추가\r\n        if(fflist.length===0)\r\n         list.push(kk);\r\n\r\n            \r\n        else{\r\n        for(let i=0;i<fflist.length;i++){\r\n\r\n            list.push(fflist[i].concat(kk));\r\n\r\n        \r\n        }\r\n        }\r\n\r\n        setclick(bb,()=>setmaindata(maindatas,()=>setworld(false,()=>setnownum(0,()=>setallList(list)))));\r\n        \r\n        // 그리고 적용 setnownum이 적용된 후 setallList가 적용됨\r\n        // setworld(false,()=>setnownum(0,()=>setallList(list)));\r\n    \r\n        \r\n\r\n        \r\n\r\n    };\r\n\r\n\r\n\r\n    // 현재 시간표에서 삭제 버튼 클릭시 함수 호출 \r\n    const Delete=(id)=>{\r\n\r\n       const aa=TdrawList.filter(e=>(e.id!==id));  // 일단 삭제할 id찾아서 지운배열을 aa에 전달\r\n\r\n\r\n       setTdrawList(aa);    // 그리고 TdrawList에 적용\r\n\r\n       let addtemp=[];      // 추가가능한 과목들 배열 만듬\r\n    \r\n      \r\n\r\n       // 여기서부터는 1,2,3순위 입력된 모든 과목들중에 aa에 있는 과목을 제외하고 추가로 신청 가능한 과목이 있는지 살펴봄.\r\n       for(let j=0;j<type1.length;j++){ // type1부터 살펴봄\r\n\r\n        let i=0;\r\n        for(i=0;i<aa.length;i++)    // aa는 현재 선택된 시간표 \r\n        {\r\n        if(aa[i].classname===type1[j].classname)   // 같은 과목은 동시 수강 못하므로 \r\n                    break;\r\n        if(!lookschedule(aa[i].classtime,type1[j].classtime))\r\n                break;  // 시간표가 중복되면 동시 수강 못하므로 \r\n                \r\n\r\n\r\n        }\r\n\r\n        if(i===aa.length){  // 최종적으로 수강 가능한 과목이면\r\n            addtemp.push(type1[j]);    // addtemp에 넣음.\r\n          \r\n        }\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n       \r\n        for(let j=0;j<type2.length;j++){\r\n\r\n            let i=0;\r\n            for(i=0;i<aa.length;i++)\r\n            {\r\n            if(aa[i].classname===type2[j].classname)\r\n                        break;\r\n            if(!lookschedule(aa[i].classtime,type2[j].classtime))\r\n                    break;\r\n                    \r\n    \r\n    \r\n            }\r\n    \r\n            if(i===aa.length){\r\n                addtemp.push(type2[j]);\r\n             \r\n    \r\n            }\r\n    \r\n    \r\n    \r\n            }\r\n\r\n\r\n            for(let j=0;j<type3.length;j++){\r\n\r\n                let i=0;\r\n                for(i=0;i<aa.length;i++)\r\n                {\r\n                if(aa[i].classname===type3[j].classname)\r\n                            break;\r\n                if(!lookschedule(aa[i].classtime,type3[j].classtime))\r\n                        break;\r\n                        \r\n        \r\n        \r\n                }\r\n        \r\n                if(i===aa.length){\r\n                    addtemp.push(type3[j]);\r\n                    \r\n        \r\n                }\r\n        \r\n        \r\n        \r\n                }\r\n    \r\n        setaddlist(addtemp);\r\n          \r\n      };\r\n\r\n      \r\n      const Add=(id)=>{\r\n\r\n        \r\n\r\n        let aa=[];\r\n\r\n        let data=addlist.find(c=>c.id===id);\r\n\r\n        if(TdrawList.length!==0)    // 과목 개수가 0이 아니면\r\n             aa=[...TdrawList,data]; // 기존 과목배열에 신규 과목 추가 \r\n        else\r\n            aa.push(data);    // 현재 과목 개수가 0이면 그냥 추가 \r\n\r\n\r\n\r\n     \r\n        let bb=[];\r\n     \r\n      \r\n        for(let i=0;i<addlist.length;i++){\r\n            if(addlist[i].id!==id){\r\n                if(addlist[i].classname!==data.classname){\r\n                    if(lookschedule(addlist[i].classtime,data.classtime))\r\n                        {\r\n                            bb.push(addlist[i]);\r\n                         \r\n                        }\r\n\r\n                }\r\n          \r\n            }\r\n\r\n\r\n        }\r\n      \r\n        setaddlist(bb);\r\n        setTdrawList(aa);\r\n\r\n\r\n      };\r\n    \r\n      \r\n      \r\n\r\n    const {type1,type2,type3}=useSelector(({write})=>({\r\n\r\n       type1:write.type1,\r\n       type2:write.type2,\r\n       type3:write.type3,\r\n    }\r\n    )); \r\n\r\n    const Maintable={\r\n        type1,type2,type3\r\n    };\r\n    \r\n\r\n\r\nuseEffect(()=>makingDrawList(),[TdrawList]);\r\nuseEffect(()=>finalprint(),[allList]);\r\n\r\n    // 배열로 시간표 리스트만 넘기면됨 \r\n\r\n    // 얘는 TdrawList를 살펴보고 과목당 시간을 적절히 출력할 수 있게 숫자로 바꿔줌\r\n    const makingDrawList=useCallback(()=>{\r\n\r\n        let makingTable=[];\r\n\r\n        for(let i=0;i<TdrawList.length;i++){  // 한 과목씩 살펴봄\r\n\r\n            for(let j=0;j<TdrawList[i].classtime.keyword.length;j++){  // 한 과목의 요일수\r\n                \r\n                let day;\r\n\r\n                switch(TdrawList[i].classtime.keyword[j]){\r\n                    case 't1': day=5; break;\r\n                    case 't2': day=24; break;\r\n                    case 't3': day=43; break;\r\n                    case 't4': day=62; break;\r\n                    case 't5': day=81; break;\r\n                    default: break;\r\n\r\n                }\r\n\r\n              \r\n\r\n              let dayarr=  TdrawList[i].classtime[TdrawList[i].classtime.keyword[j]]; // 요일 배열\r\n                \r\n              let timeleng=dayarr.length * 3.5;\r\n              let time=9+((dayarr[0]-2)*3.5);\r\n\r\n                makingTable.push({x:day,y:time,ycolor:timeleng,color:\"#CEF6F5\",text:TdrawList[i].classname});\r\n            \r\n            }\r\n\r\n\r\n        }\r\n        \r\n        console.log(makingTable);\r\n        setmakingdrawList(makingTable);\r\n\r\n\r\n    },[TdrawList]);\r\n\r\n    \r\n\r\n    const Calculate=()=>{\r\n\r\n        const fflist=mainTree(Maintable,[],[]);\r\n        setnownum(0);\r\n        setworld(true);\r\n        setallList(fflist,()=>console.log(\"씨발\"));\r\n       // setnownum(0,()=>setworld(true,()=>setallList(fflist,()=>console.log(\"씨발\"))));\r\n       \r\n        \r\n\r\n    };\r\n\r\n\r\n    const finalprint=()=>{\r\n\r\n        let kkk=[];\r\n        if(allList.length!==0){\r\n\r\n            \r\n        for(let i=0;i<allList[nownum].length;i++){\r\n\r\n            let tt=allList[nownum][i];\r\n\r\n            kkk.push(tt);\r\n\r\n\r\n\r\n            if(world===false){\r\n\r\n                if(!maindata.find(c=>c.id===allList[nownum][i].id)){\r\n\r\n                    setsubdata(allList[nownum][i]);\r\n\r\n                }\r\n                \r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        for(let i=0;i<click.length;i++){\r\n            kkk.push(click[i]);\r\n        }\r\n\r\n        if(world===true){\r\n\r\n            setmaindata(kkk);\r\n\r\n        }\r\n        \r\n        \r\n\r\n        setTdrawList(kkk);\r\n\r\n    }\r\n\r\n    };\r\n    \r\n\r\n    const next=()=>{\r\n\r\n        if(allList.length -1 === nownum  ){\r\n\r\n            setnownum(0);\r\n\r\n           \r\n        }\r\n\r\n        else {\r\n\r\n            setnownum(nownum+1);\r\n            \r\n\r\n        }\r\n finalprint();\r\n\r\n    };\r\n\r\n    const previous=()=>{\r\n\r\n        if(nownum>0){\r\n\r\n            setnownum(nownum-1);\r\n            finalprint();\r\n\r\n        }\r\n\r\n        \r\n\r\n    };\r\n\r\n     \r\n\r\n\r\n    return (\r\n        <Graphy \r\n            TdrawList={TdrawList}\r\n            Delete={Delete}\r\n            makingdrawList={makingdrawList}\r\n            Calculate={Calculate}\r\n            next={next}\r\n            previous={previous}\r\n            Add={Add}\r\n            addlist={addlist}\r\n            NextRoot={NextRoot}\r\n            click={click}\r\n            maindata={maindata}\r\n           \r\n            >\r\n\r\n            </Graphy>\r\n    );\r\n\r\n\r\n};\r\n\r\n\r\nexport default GraphContainer;"]},"metadata":{},"sourceType":"module"}