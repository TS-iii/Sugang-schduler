{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\ReactProject\\\\sugang-scheduler\\\\sugang-frontend\\\\src\\\\containers\\\\write\\\\WriteContainer.js\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport WriteSchedule from '../../component/write/WriteSchedule';\nimport { register } from '../../modules/write';\nimport Node, { lookschedule, insertTable } from '../../lib/tree/tree';\n\nconst WriteContainer = ({\n  history\n}) => {\n  const dispatch = useDispatch();\n  const {\n    type1,\n    type2,\n    type3\n  } = useSelector(({\n    write\n  }) => ({\n    type1: write.type1,\n    type2: write.type2,\n    type3: write.type3\n  })); // write 가 관리하고 있는 상태를 불러와서 write에 저장\n\n  let table = {\n    type1,\n    type2,\n    type3\n  };\n  let max = 0;\n  let finalTable = []; // 1번 순회함.\n\n  const composeTree = function (t, table) {\n    const root = new Node();\n\n    if (t === 'type1') {\n      //루트 바로 밑 1번째 자식들 구성\n      for (let i = 0; i < table[type1].length; i++) {\n        // let node= new Node(type1[i]);\n        root.insert(table[type1][i]);\n      }\n\n      for (let i = 0; i < table[type1].length; i++) {\n        search(root.children[i], 1);\n      }\n    } else if (t === 'type2') {\n      for (let i = 0; i < table[type2].length; i++) {\n        // let node= new Node(type1[i]);\n        root.insert(table[type2][i]);\n      }\n\n      for (let i = 0; i < table[type2].length; i++) {\n        search(root.children[i], 1);\n      }\n    } else if (t === 'type3') {\n      for (let i = 0; i < table[type3].length; i++) {\n        // let node= new Node(type1[i]);\n        root.insert(table[type3][i]);\n      }\n\n      for (let i = 0; i < table[type3].length; i++) {\n        search(root.children[i], 1);\n      }\n    }\n\n    return root;\n  };\n\n  const search = function (n, k) {\n    let num = 0;\n\n    for (let i = n.num + 1; i < n.adault.children.length; i++) {\n      if (n.data.classname !== n.adault.children[i].data.classname) {\n        if (lookschedule(n.data.classtime, n.adault.children[i].data.classtime)) {\n          n.insert(n.adault.children[i].data);\n          num++;\n        }\n      }\n    }\n\n    ;\n\n    if (num === 0) //지금 이 노드가 leaf라는 소리\n      {\n        if (max < k) {\n          max = k;\n          finalTable = [];\n          finalTable.push(n);\n        } else if (max === k) {\n          finalTable.push(n);\n        }\n\n        return;\n      } else {\n      for (let i = 0; i < num; i++) {\n        search(n.children[i], k + 1);\n      }\n    }\n  };\n\n  useEffect(() => {\n    onCalculate();\n  }, [type1]);\n\n  const onCalculate = () => {\n    composeTree('type1', table);\n\n    for (let i = 0; i < finalTable.length; i++) {\n      let n = finalTable[i];\n      console.log('--------%d번째 시간표----------', i + 1);\n\n      for (let j = 0; j < max; j++) {\n        console.log('%d:%s %s ', j + 1, n.data.classname, n.data.profess);\n        n = n.adault;\n      }\n\n      console.log('---------------------------');\n    }\n  };\n\n  const onFinal = ({\n    imp,\n    classname,\n    classtime,\n    profess,\n    classscore\n  }) => {\n    let type;\n    if (imp === '1') type = 'type1';else if (imp === '2') type = 'type2';else if (imp === '3') type = 'type3';\n    dispatch(register({\n      form: type,\n      value: {\n        classname,\n        classtime,\n        profess,\n        classscore\n      }\n    }));\n  };\n\n  return React.createElement(WriteSchedule, {\n    onFinal: onFinal,\n    onCalculate: onCalculate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  });\n};\n\nexport default WriteContainer; //시간표 변환\n// const classTimeMod=function(c){\n// let schedule={\n//     t1:[],\n//     t2:[],\n//     t3:[],\n//     t4:[],\n//     t5:[]\n// };\n// let n=-1;\n// let t=null;\n// for(let i=0;i<c.length;i++){\n//     if(n===3)       \n//         {\n//             n=2;\n//             continue;\n//         }\n//     if(n===2)\n//         {\n//             n=-1;\n//             continue;\n//         }\n//     if(c[i]===' ')\n//         continue;\n//     switch(c[i]){\n//         case '월':\n//             t='t1';\n//             break;\n//         case '화':\n//             t='t2';\n//             break;\n//         case '수':\n//             t='t3';\n//             break;\n//         case '목':\n//             t='t4';\n//             break;\n//         case '금':\n//             t='t5';\n//             break;    \n//         default:\n//             break;\n//     }\n//     if(c[i]>='A' && c[i]<='J')\n//         {   let b=c[i]-'A';\n//             b=(b+1)*3;\n//             schedule[t].push(b-1);\n//             schedule[t].push(b);\n//             schedule[t].push(b+1);\n//             continue;\n//         }\n//     else if(c[i]>='1' && c[i]<='9')\n//         {   \n//             if(c[i+1]>='0' && c[i+1]<='9')\n//                 {\n//                     n=1;\n//                     continue;\n//                 }\n//             else if(n===1)\n//                 {\n//                     let b=20+(c[i]-'0');\n//                     n=-1;\n//                     if(c[i+1]==='.')\n//                         {\n//                             n=3;\n//                             schedule[t].push(b+1);\n//                         }\n//                     else\n//                         schedule[t].push(b);\n//                 }\n//             else {\n//                 if(c[i+1]==='.')\n//                     {  n=3;\n//                         schedule[t].push((c[i]-'0')+1);\n//                         }\n//                 else\n//                     schedule[t].push(c[i]-'0');\n//             }\n//         }\n// }//for문 끝\n// return schedule;\n// };","map":{"version":3,"sources":["C:/Users/user/Desktop/ReactProject/sugang-scheduler/sugang-frontend/src/containers/write/WriteContainer.js"],"names":["React","useState","useCallback","useEffect","useSelector","useDispatch","withRouter","WriteSchedule","register","Node","lookschedule","insertTable","WriteContainer","history","dispatch","type1","type2","type3","write","table","max","finalTable","composeTree","t","root","i","length","insert","search","children","n","k","num","adault","data","classname","classtime","push","onCalculate","console","log","j","profess","onFinal","imp","classscore","type","form","value"],"mappings":"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","sourcesContent":["\r\n\r\nimport React , {useState,useCallback,useEffect} from 'react';\r\nimport {useSelector,useDispatch} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom';\r\nimport WriteSchedule from '../../component/write/WriteSchedule';\r\n\r\nimport {register} from '../../modules/write';\r\n\r\nimport Node ,{lookschedule,insertTable} from '../../lib/tree/tree';\r\n\r\n\r\n\r\nconst WriteContainer=({history})=>{\r\n\r\n     const dispatch = useDispatch();\r\n\r\n     const {type1,type2,type3}=useSelector(({write})=>({\r\n\r\n        type1:write.type1,\r\n        type2:write.type2,\r\n        type3:write.type3,\r\n     }\r\n     ));  // write 가 관리하고 있는 상태를 불러와서 write에 저장\r\n\r\n\r\n     let table={\r\n         type1,\r\n         type2,\r\n         type3\r\n     };\r\n\r\n     \r\n     let max=0;\r\n     let finalTable=[];\r\n\r\n// 1번 순회함.\r\nconst composeTree=function(t,table){\r\n\r\n  \r\n    const root= new Node();\r\n\r\n    if(t==='type1')\r\n        {\r\n    //루트 바로 밑 1번째 자식들 구성\r\n    for(let i=0;i<table[type1].length;i++){\r\n\r\n        // let node= new Node(type1[i]);\r\n\r\n        root.insert(table[type1][i]);\r\n\r\n   \r\n      \r\n    }\r\n\r\n\r\n\r\n\r\n    for(let i=0;i<table[type1].length;i++){\r\n\r\n        search(root.children[i],1);\r\n       \r\n    }\r\n        }\r\n\r\n    else if(t==='type2'){\r\n\r\n        for(let i=0;i<table[type2].length;i++){\r\n\r\n            // let node= new Node(type1[i]);\r\n    \r\n            root.insert(table[type2][i]);\r\n    \r\n       \r\n          \r\n        }\r\n    \r\n    \r\n    \r\n    \r\n        for(let i=0;i<table[type2].length;i++){\r\n    \r\n            search(root.children[i],1);\r\n           \r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    else if(t==='type3'){\r\n\r\n        for(let i=0;i<table[type3].length;i++){\r\n\r\n            // let node= new Node(type1[i]);\r\n    \r\n            root.insert(table[type3][i]);\r\n    \r\n       \r\n          \r\n        }\r\n    \r\n        for(let i=0;i<table[type3].length;i++){\r\n    \r\n            search(root.children[i],1);\r\n           \r\n        }\r\n\r\n\r\n    }\r\n    \r\n\r\nreturn root;\r\n\r\n};\r\n\r\nconst search=function(n,k){\r\n\r\n \r\n    let num=0;\r\n\r\n    for(let i=n.num+1;i<n.adault.children.length;i++){\r\n\r\n            if(n.data.classname!==n.adault.children[i].data.classname){\r\n\r\n            if(lookschedule(n.data.classtime,n.adault.children[i].data.classtime))\r\n                {\r\n                    n.insert(n.adault.children[i].data);\r\n                    num++;\r\n\r\n                }\r\n            }\r\n                   \r\n    };\r\n\r\n\r\n\r\n    if(num===0)      //지금 이 노드가 leaf라는 소리\r\n        {   \r\n        \r\n            if(max<k)\r\n            {\r\n                max=k;\r\n                \r\n                finalTable=[];\r\n                finalTable.push(n);\r\n\r\n               \r\n\r\n            }\r\n\r\n            else if (max===k)\r\n            {\r\n                    finalTable.push(n);\r\n                 \r\n            }\r\n            return;\r\n        }\r\n    else {\r\n\r\n        for(let i=0;i<num;i++)\r\n        {\r\n            search(n.children[i],k+1);\r\n\r\n        }\r\n\r\n    }\r\n\r\n};\r\n\r\n\r\nuseEffect(()=>{onCalculate()},[type1]);\r\n\r\nconst onCalculate=()=>{\r\n\r\n\r\n\r\n   composeTree('type1',table);\r\n   \r\n   for(let i=0;i<finalTable.length;i++)\r\n   {\r\n       let n=finalTable[i];\r\n\r\n       console.log('--------%d번째 시간표----------',i+1);\r\n        for(let j=0;j<max;j++)\r\n        {   \r\n           \r\n            console.log('%d:%s %s ',j+1 ,n.data.classname,n.data.profess);\r\n            n=n.adault;\r\n\r\n        }\r\n        console.log('---------------------------');\r\n   }\r\n\r\n\r\n\r\n\r\n};\r\n\r\nconst onFinal=({imp,classname,classtime,profess,classscore})=>{\r\n\r\n        let type;\r\n\r\n        if(imp==='1')\r\n            type='type1';\r\n        else if(imp==='2')\r\n            type='type2';\r\n        else if(imp==='3')\r\n            type='type3';\r\n\r\n       \r\n        \r\n        dispatch(\r\n            register({\r\n                form:type,\r\n                value:{\r\n                  classname,\r\n                  classtime,\r\n                  profess,\r\n                  classscore,\r\n                 }\r\n                \r\n            })\r\n        );\r\n        \r\n      \r\n    \r\n    };\r\n\r\n\r\n\r\n\r\n     return (\r\n\r\n        <WriteSchedule \r\n        \r\n        onFinal={onFinal}\r\n        onCalculate={onCalculate}\r\n        />\r\n\r\n     );\r\n\r\n};\r\n\r\n\r\n\r\nexport default WriteContainer;\r\n\r\n\r\n\r\n\r\n//시간표 변환\r\n// const classTimeMod=function(c){\r\n\r\n// let schedule={\r\n\r\n//     t1:[],\r\n//     t2:[],\r\n//     t3:[],\r\n//     t4:[],\r\n//     t5:[]\r\n\r\n// };\r\n\r\n// let n=-1;\r\n// let t=null;\r\n\r\n// for(let i=0;i<c.length;i++){\r\n   \r\n//     if(n===3)       \r\n//         {\r\n//             n=2;\r\n//             continue;\r\n//         }\r\n    \r\n//     if(n===2)\r\n//         {\r\n//             n=-1;\r\n//             continue;\r\n//         }\r\n\r\n//     if(c[i]===' ')\r\n//         continue;\r\n\r\n//     switch(c[i]){\r\n\r\n//         case '월':\r\n//             t='t1';\r\n//             break;\r\n//         case '화':\r\n//             t='t2';\r\n//             break;\r\n//         case '수':\r\n//             t='t3';\r\n//             break;\r\n//         case '목':\r\n//             t='t4';\r\n//             break;\r\n//         case '금':\r\n//             t='t5';\r\n//             break;    \r\n        \r\n//         default:\r\n//             break;\r\n    \r\n//     }\r\n\r\n//     if(c[i]>='A' && c[i]<='J')\r\n//         {   let b=c[i]-'A';\r\n//             b=(b+1)*3;\r\n\r\n//             schedule[t].push(b-1);\r\n//             schedule[t].push(b);\r\n//             schedule[t].push(b+1);\r\n\r\n//             continue;\r\n//         }\r\n\r\n//     else if(c[i]>='1' && c[i]<='9')\r\n//         {   \r\n            \r\n//             if(c[i+1]>='0' && c[i+1]<='9')\r\n//                 {\r\n//                     n=1;\r\n//                     continue;\r\n//                 }\r\n//             else if(n===1)\r\n//                 {\r\n//                     let b=20+(c[i]-'0');\r\n//                     n=-1;\r\n\r\n//                     if(c[i+1]==='.')\r\n//                         {\r\n//                             n=3;\r\n//                             schedule[t].push(b+1);\r\n//                         }\r\n//                     else\r\n//                         schedule[t].push(b);\r\n                \r\n//                 }\r\n\r\n//             else {\r\n\r\n//                 if(c[i+1]==='.')\r\n//                     {  n=3;\r\n//                         schedule[t].push((c[i]-'0')+1);\r\n//                         }\r\n//                 else\r\n//                     schedule[t].push(c[i]-'0');\r\n//             }\r\n\r\n//         }\r\n\r\n    \r\n    \r\n\r\n\r\n// }//for문 끝\r\n\r\n\r\n// return schedule;\r\n\r\n// };"]},"metadata":{},"sourceType":"module"}