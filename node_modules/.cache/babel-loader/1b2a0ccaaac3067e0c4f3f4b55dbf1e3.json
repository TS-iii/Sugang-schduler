{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\ReactProject\\\\sugang-scheduler\\\\sugang-frontend\\\\src\\\\containers\\\\graph\\\\GraphContainers.js\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport Graphy from '../../component/graph/Graph';\nimport { register } from '../../modules/write';\nimport { mainTree, lookschedule } from '../../lib/tree/tree1'; // 안겹친다는 가정이 필요\n// 안겹치고 이 함수를 사용하면 dst 시간표에 src가 추가됨. \n// 시간표와, 시간표에 넣을 과목을 dst, src 차례로 주면됨\n//const insertTable=function(dst,src)\n\nconst GraphContainer = () => {\n  //TdrawList랑 addlist id는 배열의 인덱스랑 같음 \n  const [TdrawList, setTdrawList] = useState([]); // 현재 신청된 목록들  (/graph 상단 목록에 영향)\n  //{data: , id: }\n\n  const [addlist, setaddlist] = useState([]); // 현재 추가 가능한 목록들 (/graph 하단 목록에 영향 )\n  // {data: id: }\n\n  const [makingdrawList, setmakingdrawList] = useState([]); // 현재 신청된 목록의 시간표 좌표 구현\n\n  const [allList, setallList] = useState([]);\n  const [nownum, setnownum] = useState(0); // 대안 루트 (id)는 실패했을 경우 \n\n  const NextRoot = id => {}; // 현재 시간표에서 삭제 버튼 클릭시 함수 호출 \n\n\n  const Delete = id => {\n    const aa = TdrawList.filter(e => e.id !== id); // 일단 삭제할 id찾아서 지운배열을 aa에 전달\n\n    setTdrawList(aa); // 그리고 TdrawList에 적용\n\n    let addtemp = []; // 추가가능한 과목들 배열 만듬\n    // 여기서부터는 1,2,3순위 입력된 모든 과목들중에 aa에 있는 과목을 제외하고 추가로 신청 가능한 과목이 있는지 살펴봄.\n\n    for (let j = 0; j < type1.length; j++) {\n      // type1부터 살펴봄\n      let i = 0;\n\n      for (i = 0; i < aa.length; i++) // aa는 현재 선택된 시간표 \n      {\n        if (aa[i].classname === type1[j].classname) // 같은 과목은 동시 수강 못하므로 \n          break;\n        if (!lookschedule(aa[i].classtime, type1[j].classtime)) break; // 시간표가 중복되면 동시 수강 못하므로 \n      }\n\n      if (i === aa.length) {\n        // 최종적으로 수강 가능한 과목이면\n        addtemp.push(type1[j]); // addtemp에 넣음.\n      }\n    }\n\n    for (let j = 0; j < type2.length; j++) {\n      let i = 0;\n\n      for (i = 0; i < aa.length; i++) {\n        if (aa[i].classname === type2[j].classname) break;\n        if (!lookschedule(aa[i].classtime, type2[j].classtime)) break;\n      }\n\n      if (i === aa.length) {\n        addtemp.push(type2[j]);\n      }\n    }\n\n    for (let j = 0; j < type3.length; j++) {\n      let i = 0;\n\n      for (i = 0; i < aa.length; i++) {\n        if (aa[i].classname === type3[j].classname) break;\n        if (!lookschedule(aa[i].classtime, type3[j].classtime)) break;\n      }\n\n      if (i === aa.length) {\n        addtemp.push(type3[j]);\n      }\n    }\n\n    setaddlist(addtemp);\n  };\n\n  const Add = id => {\n    let aa = [];\n    let data = addlist.find(c => c.id === id);\n    if (TdrawList.length !== 0) // 과목 개수가 0이 아니면\n      aa = [...TdrawList, data]; // 기존 과목배열에 신규 과목 추가 \n    else aa.push(data); // 현재 과목 개수가 0이면 그냥 추가 \n\n    let bb = [];\n\n    for (let i = 0; i < addlist.length; i++) {\n      if (addlist[i].id !== id) {\n        if (addlist[i].classname !== addlist[id].classname) {\n          if (lookschedule(addlist[i].classtime, addlist[id].classtime)) {\n            bb.push(addlist[i]);\n          }\n        }\n      }\n    }\n\n    setaddlist(bb);\n    setTdrawList(aa);\n  }; // const dispatch = useDispatch();\n\n\n  const {\n    type1,\n    type2,\n    type3\n  } = useSelector(({\n    write\n  }) => ({\n    type1: write.type1,\n    type2: write.type2,\n    type3: write.type3\n  }));\n  const Maintable = {\n    type1,\n    type2,\n    type3\n  };\n  useEffect(() => makingDrawList(), [TdrawList]);\n  useEffect(() => finalprint(), [allList]); // 배열로 시간표 리스트만 넘기면됨 \n  // 얘는 TdrawList를 살펴보고 과목당 시간을 적절히 출력할 수 있게 숫자로 바꿔줌\n\n  const makingDrawList = useCallback(() => {\n    let makingTable = [];\n\n    for (let i = 0; i < TdrawList.length; i++) {\n      // 한 과목씩 살펴봄\n      for (let j = 0; j < TdrawList[i].classtime.keyword.length; j++) {\n        // 한 과목의 요일수\n        let day;\n\n        switch (TdrawList[i].classtime.keyword[j]) {\n          case 't1':\n            day = 5;\n            break;\n\n          case 't2':\n            day = 24;\n            break;\n\n          case 't3':\n            day = 43;\n            break;\n\n          case 't4':\n            day = 62;\n            break;\n\n          case 't5':\n            day = 81;\n            break;\n\n          default:\n            break;\n        }\n\n        let dayarr = TdrawList[i].classtime[TdrawList[i].classtime.keyword[j]]; // 요일 배열\n\n        let timeleng = dayarr.length * 3.5;\n        let time = 9 + (dayarr[0] - 2) * 3.5;\n        makingTable.push({\n          x: day,\n          y: time,\n          ycolor: timeleng,\n          color: \"#CEF6F5\",\n          text: TdrawList[i].classname\n        });\n      }\n    }\n\n    console.log(makingTable);\n    setmakingdrawList(makingTable);\n  }, [TdrawList]);\n\n  const Calculate = () => {\n    console.log('type1');\n    console.log(Maintable.type1);\n    console.log('type2');\n    console.log(Maintable.type2);\n    console.log('type3');\n    console.log(Maintable.type3);\n    let llist = [];\n    const fflist = mainTree(Maintable, llist);\n    setallList(fflist);\n  };\n\n  const finalprint = () => {\n    let kkk = [];\n\n    if (allList.length !== 0) {\n      for (let i = 0; i < allList[nownum].length; i++) {\n        let tt = allList[nownum][i];\n        kkk.push(tt);\n      }\n\n      setTdrawList(kkk);\n    }\n  };\n\n  const next = () => {\n    if (allList.length - 1 === nownum) {\n      setnownum(0);\n    } else {\n      setnownum(nownum + 1);\n    }\n\n    finalprint();\n  };\n\n  const previous = () => {\n    if (nownum > 0) {\n      setnownum(nownum - 1);\n      finalprint();\n    }\n  };\n\n  return React.createElement(Graphy, {\n    TdrawList: TdrawList,\n    Delete: Delete,\n    makingdrawList: makingdrawList,\n    Calculate: Calculate,\n    next: next,\n    previous: previous,\n    Add: Add,\n    addlist: addlist,\n    NextRoot: NextRoot,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341\n    },\n    __self: this\n  });\n};\n\nexport default GraphContainer;","map":{"version":3,"sources":["C:/Users/user/Desktop/ReactProject/sugang-scheduler/sugang-frontend/src/containers/graph/GraphContainers.js"],"names":["React","useState","useCallback","useEffect","useSelector","useDispatch","withRouter","Graphy","register","mainTree","lookschedule","GraphContainer","TdrawList","setTdrawList","addlist","setaddlist","makingdrawList","setmakingdrawList","allList","setallList","nownum","setnownum","NextRoot","id","Delete","aa","filter","e","addtemp","j","type1","length","i","classname","classtime","push","type2","type3","Add","data","find","c","bb","write","Maintable","makingDrawList","finalprint","makingTable","keyword","day","dayarr","timeleng","time","x","y","ycolor","color","text","console","log","Calculate","llist","fflist","kkk","tt","next","previous"],"mappings":"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","sourcesContent":["\r\nimport React , {useState,useCallback,useEffect} from 'react';\r\nimport {useSelector,useDispatch} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom';\r\nimport Graphy from '../../component/graph/Graph';\r\n\r\nimport {register} from '../../modules/write';\r\n\r\n\r\nimport  { mainTree,lookschedule} from '../../lib/tree/tree1';\r\n\r\n\r\n// 안겹친다는 가정이 필요\r\n// 안겹치고 이 함수를 사용하면 dst 시간표에 src가 추가됨. \r\n// 시간표와, 시간표에 넣을 과목을 dst, src 차례로 주면됨\r\n//const insertTable=function(dst,src)\r\n\r\n\r\n\r\nconst GraphContainer=()=>{\r\n\r\n\r\n\r\n    //TdrawList랑 addlist id는 배열의 인덱스랑 같음 \r\n    const [TdrawList,setTdrawList]=useState([]);    // 현재 신청된 목록들  (/graph 상단 목록에 영향)\r\n    //{data: , id: }\r\n    const [addlist,setaddlist]=useState([]);    // 현재 추가 가능한 목록들 (/graph 하단 목록에 영향 )\r\n    // {data: id: }\r\n\r\n    const [makingdrawList,setmakingdrawList]=useState([]); // 현재 신청된 목록의 시간표 좌표 구현\r\n\r\n    const [allList,setallList]=useState([]);    \r\n\r\n    const [nownum,setnownum]=useState(0);   \r\n\r\n    \r\n\r\n    // 대안 루트 (id)는 실패했을 경우 \r\n    const NextRoot=(id)=>{\r\n        \r\n        \r\n\r\n        \r\n\r\n\r\n\r\n\r\n\r\n    };\r\n\r\n\r\n\r\n    // 현재 시간표에서 삭제 버튼 클릭시 함수 호출 \r\n    const Delete=(id)=>{\r\n\r\n       const aa=TdrawList.filter(e=>(e.id!==id));  // 일단 삭제할 id찾아서 지운배열을 aa에 전달\r\n\r\n\r\n\r\n\r\n       setTdrawList(aa);    // 그리고 TdrawList에 적용\r\n\r\n       let addtemp=[];      // 추가가능한 과목들 배열 만듬\r\n    \r\n      \r\n\r\n       // 여기서부터는 1,2,3순위 입력된 모든 과목들중에 aa에 있는 과목을 제외하고 추가로 신청 가능한 과목이 있는지 살펴봄.\r\n       for(let j=0;j<type1.length;j++){ // type1부터 살펴봄\r\n\r\n        let i=0;\r\n        for(i=0;i<aa.length;i++)    // aa는 현재 선택된 시간표 \r\n        {\r\n        if(aa[i].classname===type1[j].classname)   // 같은 과목은 동시 수강 못하므로 \r\n                    break;\r\n        if(!lookschedule(aa[i].classtime,type1[j].classtime))\r\n                break;  // 시간표가 중복되면 동시 수강 못하므로 \r\n                \r\n\r\n\r\n        }\r\n\r\n        if(i===aa.length){  // 최종적으로 수강 가능한 과목이면\r\n            addtemp.push(type1[j]);    // addtemp에 넣음.\r\n          \r\n        }\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n       \r\n        for(let j=0;j<type2.length;j++){\r\n\r\n            let i=0;\r\n            for(i=0;i<aa.length;i++)\r\n            {\r\n            if(aa[i].classname===type2[j].classname)\r\n                        break;\r\n            if(!lookschedule(aa[i].classtime,type2[j].classtime))\r\n                    break;\r\n                    \r\n    \r\n    \r\n            }\r\n    \r\n            if(i===aa.length){\r\n                addtemp.push(type2[j]);\r\n             \r\n    \r\n            }\r\n    \r\n    \r\n    \r\n            }\r\n\r\n\r\n            for(let j=0;j<type3.length;j++){\r\n\r\n                let i=0;\r\n                for(i=0;i<aa.length;i++)\r\n                {\r\n                if(aa[i].classname===type3[j].classname)\r\n                            break;\r\n                if(!lookschedule(aa[i].classtime,type3[j].classtime))\r\n                        break;\r\n                        \r\n        \r\n        \r\n                }\r\n        \r\n                if(i===aa.length){\r\n                    addtemp.push(type3[j]);\r\n                    \r\n        \r\n                }\r\n        \r\n        \r\n        \r\n                }\r\n    \r\n        setaddlist(addtemp);\r\n          \r\n      };\r\n\r\n      \r\n      const Add=(id)=>{\r\n\r\n        \r\n\r\n        let aa=[];\r\n\r\n        let data=addlist.find(c=>c.id===id);\r\n\r\n        if(TdrawList.length!==0)    // 과목 개수가 0이 아니면\r\n             aa=[...TdrawList,data]; // 기존 과목배열에 신규 과목 추가 \r\n        else\r\n            aa.push(data);    // 현재 과목 개수가 0이면 그냥 추가 \r\n\r\n\r\n\r\n     \r\n        let bb=[];\r\n     \r\n      \r\n        for(let i=0;i<addlist.length;i++){\r\n            if(addlist[i].id!==id){\r\n                if(addlist[i].classname!==addlist[id].classname){\r\n                    if(lookschedule(addlist[i].classtime,addlist[id].classtime))\r\n                        {\r\n                            bb.push(addlist[i]);\r\n                         \r\n                        }\r\n\r\n                }\r\n          \r\n            }\r\n\r\n\r\n        }\r\n      \r\n        setaddlist(bb);\r\n        setTdrawList(aa);\r\n\r\n\r\n      };\r\n    \r\n      \r\n      \r\n    \r\n\r\n    // const dispatch = useDispatch();\r\n\r\n    const {type1,type2,type3}=useSelector(({write})=>({\r\n\r\n       type1:write.type1,\r\n       type2:write.type2,\r\n       type3:write.type3,\r\n    }\r\n    )); \r\n\r\n    const Maintable={\r\n        type1,type2,type3\r\n    };\r\n    \r\n\r\n\r\nuseEffect(()=>makingDrawList(),[TdrawList]);\r\nuseEffect(()=>finalprint(),[allList]);\r\n\r\n    // 배열로 시간표 리스트만 넘기면됨 \r\n\r\n    // 얘는 TdrawList를 살펴보고 과목당 시간을 적절히 출력할 수 있게 숫자로 바꿔줌\r\n    const makingDrawList=useCallback(()=>{\r\n\r\n        let makingTable=[];\r\n\r\n        for(let i=0;i<TdrawList.length;i++){  // 한 과목씩 살펴봄\r\n\r\n            for(let j=0;j<TdrawList[i].classtime.keyword.length;j++){  // 한 과목의 요일수\r\n                \r\n                let day;\r\n\r\n                switch(TdrawList[i].classtime.keyword[j]){\r\n                    case 't1': day=5; break;\r\n                    case 't2': day=24; break;\r\n                    case 't3': day=43; break;\r\n                    case 't4': day=62; break;\r\n                    case 't5': day=81; break;\r\n                    default: break;\r\n\r\n                }\r\n\r\n              \r\n\r\n              let dayarr=  TdrawList[i].classtime[TdrawList[i].classtime.keyword[j]]; // 요일 배열\r\n                \r\n              let timeleng=dayarr.length * 3.5;\r\n              let time=9+((dayarr[0]-2)*3.5);\r\n\r\n                makingTable.push({x:day,y:time,ycolor:timeleng,color:\"#CEF6F5\",text:TdrawList[i].classname});\r\n            \r\n            }\r\n\r\n\r\n        }\r\n        \r\n        console.log(makingTable);\r\n        setmakingdrawList(makingTable);\r\n\r\n\r\n    },[TdrawList]);\r\n\r\n    \r\n\r\n    const Calculate=()=>{\r\n\r\n\r\n       \r\n            console.log('type1');\r\n            console.log(Maintable.type1);\r\n        \r\n\r\n            console.log('type2');\r\n            console.log(Maintable.type2);\r\n            console.log('type3');\r\n            console.log(Maintable.type3);\r\n\r\n    \r\n\r\n            let llist=[];\r\n        const fflist=mainTree(Maintable,llist);\r\n\r\n        setallList(fflist);\r\n    \r\n\r\n    };\r\n\r\n    \r\n\r\n    const finalprint=()=>{\r\n\r\n        let kkk=[];\r\n        if(allList.length!==0){\r\n\r\n            \r\n        for(let i=0;i<allList[nownum].length;i++){\r\n\r\n            let tt=allList[nownum][i];\r\n\r\n            kkk.push(tt);\r\n\r\n\r\n        }\r\n\r\n        setTdrawList(kkk);\r\n\r\n    }\r\n\r\n    };\r\n    \r\n\r\n    const next=()=>{\r\n\r\n        if(allList.length -1 === nownum  ){\r\n\r\n            setnownum(0);\r\n\r\n           \r\n        }\r\n\r\n        else {\r\n\r\n            setnownum(nownum+1);\r\n            \r\n\r\n        }\r\n finalprint();\r\n\r\n    };\r\n\r\n    const previous=()=>{\r\n\r\n        if(nownum>0){\r\n\r\n            setnownum(nownum-1);\r\n            finalprint();\r\n\r\n        }\r\n\r\n        \r\n\r\n    };\r\n\r\n     \r\n\r\n\r\n    return (\r\n        <Graphy \r\n            TdrawList={TdrawList}\r\n            Delete={Delete}\r\n            makingdrawList={makingdrawList}\r\n            Calculate={Calculate}\r\n            next={next}\r\n            previous={previous}\r\n            Add={Add}\r\n            addlist={addlist}\r\n            NextRoot={NextRoot}\r\n            >\r\n\r\n            </Graphy>\r\n    );\r\n\r\n\r\n};\r\n\r\n\r\nexport default GraphContainer;"]},"metadata":{},"sourceType":"module"}