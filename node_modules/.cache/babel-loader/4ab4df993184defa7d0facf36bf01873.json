{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\ReactProject\\\\sugang-scheduler\\\\sugang-frontend\\\\src\\\\containers\\\\graph\\\\GraphContainer.js\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport Graph from '../../component/graph/Graph';\nimport { register } from '../../modules/write';\nimport Node, { lookschedule, insertTable, composeTree, search } from '../../lib/tree/tree';\nimport { tsConstructorType } from '../../../../../../../AppData/Local/Microsoft/TypeScript/3.7/node_modules/@babel/types/lib/index'; // 안겹친다는 가정이 필요\n// 안겹치고 이 함수를 사용하면 dst 시간표에 src가 추가됨. \n// 시간표와, 시간표에 넣을 과목을 dst, src 차례로 주면됨\n//const insertTable=function(dst,src)\n\nclass mNode {\n  constructor(list) {\n    this.children = [];\n    this.classlist = list;\n  }\n\n  insert(list) {\n    let node = new mNode(list);\n    this.children[this.children.length] = node;\n  }\n\n}\n\n;\n\nconst GraphContainer = () => {\n  const [TdrawList, setTdrawList] = useState([{\n    id: 1,\n    name: \"회로이론\"\n  }, {\n    id: 2,\n    name: \"알고리즘\"\n  }, {\n    id: 3,\n    name: \"논리회로\"\n  }]);\n  const [makingdrawList, setmakingdrawList] = useState([]);\n\n  const Delete = id => {\n    const aa = TdrawList.filter(e => e.id !== id);\n    setTdrawList(aa);\n  };\n\n  useEffect(() => {}, TdrawList); // const dispatch = useDispatch();\n\n  const {\n    type1,\n    type2,\n    type3\n  } = useSelector(({\n    write\n  }) => ({\n    type1: write.type1,\n    type2: write.type2,\n    type3: write.type3\n  }));\n  const Maintable = {\n    type1,\n    type2,\n    type3\n  }; // 배열로 시간표 리스트만 넘기면됨 \n\n  const makingDrawList = useCallback(arr => {\n    let makingTable = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      // 한 과목씩 살펴봄\n      for (let j = 0; j < arr[i].classtime.keyword.length; j++) {\n        // 한 과목의 요일수\n        let day;\n\n        switch (arr[i].classtime.keyword[j]) {\n          case 't1':\n            day = 5;\n            break;\n\n          case 't2':\n            day = 24;\n            break;\n\n          case 't3':\n            day = 43;\n            break;\n\n          case 't4':\n            day = 62;\n            break;\n\n          case 't5':\n            day = 81;\n            break;\n\n          default:\n            break;\n        }\n\n        let dayarr = arr[i].classtime[arr[i].classtime.keyword[j]]; // 요일 배열\n\n        let timeleng = dayarr.length * 3.5;\n        let time = 9 + (dayarr[0] - 2) * 3.5;\n        makingTable.push({\n          x: day,\n          y: time,\n          ycolor: timeleng,\n          color: \"#CEF6F5\",\n          text: arr[i].classname\n        });\n      }\n    }\n\n    setmakingdrawList(makingTable);\n  }, [TdrawList]); //개수기반\n  //우선순위 1개수가 같으면 일단 그거 다출력\n\n  const Calculate = () => {\n    let finalrank = []; //최종 개수 기반 순위\n\n    const root1 = composeTree('type1', Maintable);\n    let maxOneTable = []; //개수 기반\n\n    for (let i = 0; i < root1.finalTable.length; i++) {\n      let n = root1.finalTable[i];\n\n      if (n.deep === root1.max) {\n        maxOneTable.push(n);\n      }\n    } //1 개수 같은것들끼리 모아둠  -> 또 경쟁\n\n\n    for (let i = 0; i < maxOneTable.length; i++) {\n      for (let j = 0; j < root1.max; j++) {\n        let n = maxOneTable[i];\n        n = n.adault;\n      }\n    }\n  };\n\n  const onCalculate = () => {\n    const root = composeTree('type1', Maintable, []);\n    let maxScoreTable = [];\n    let maxTable = [];\n\n    for (let i = 0; i < root.finalTable.length; i++) {\n      let n = root.finalTable[i];\n\n      if (n.score === root.maxScore) {\n        maxScoreTable.push(n);\n      }\n\n      if (n.deep === root.max) {\n        maxTable.push(n);\n      }\n    }\n\n    console.log('&&&&&&&&&&&&&&&학점 우선 시간표&&&&&&&&&&&&&&');\n\n    for (let i = 0; i < maxScoreTable.length; i++) {\n      let n = maxScoreTable[i];\n      let k = n.deep;\n      console.log('--------%d번째 시간표----------', i + 1);\n\n      for (let j = 0; j < k; j++) {\n        console.log('%d:%s %s %d ', j + 1, n.data.classname, n.data.profess, n.data.classscore);\n        n = n.adault;\n      }\n\n      console.log('[총 %d학점]', root.maxScore);\n      console.log('---------------------------');\n    }\n\n    console.log('&&&&&&&&&&&&&&&과목개수 우선 시간표&&&&&&&&&&&&&&');\n\n    for (let i = 0; i < maxTable.length; i++) {\n      let n = maxTable[i];\n      let a = n.score;\n      console.log('--------%d번째 시간표----------', i + 1);\n\n      for (let j = 0; j < root.max; j++) {\n        console.log('%d:%s %s %d', j + 1, n.data.classname, n.data.profess, n.data.classscore);\n        n = n.adault;\n      }\n\n      console.log('[총%d학점]', a);\n      console.log('---------------------------');\n    }\n\n    let a = maxTable[0];\n    let bb = [];\n\n    for (let i = 0; i < root.max; i++) {\n      bb.push(a.data);\n      a = a.adault;\n    }\n\n    makingDrawList(bb);\n  };\n\n  return React.createElement(Graph, {\n    onCalculate: onCalculate,\n    TdrawList: TdrawList,\n    Delete: Delete,\n    makingdrawList: makingdrawList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270\n    },\n    __self: this\n  });\n};\n\nexport default GraphContainer;","map":{"version":3,"sources":["C:/Users/user/Desktop/ReactProject/sugang-scheduler/sugang-frontend/src/containers/graph/GraphContainer.js"],"names":["React","useState","useCallback","useEffect","useSelector","useDispatch","withRouter","Graph","register","Node","lookschedule","insertTable","composeTree","search","tsConstructorType","mNode","constructor","list","children","classlist","insert","node","length","GraphContainer","TdrawList","setTdrawList","id","name","makingdrawList","setmakingdrawList","Delete","aa","filter","e","type1","type2","type3","write","Maintable","makingDrawList","arr","makingTable","i","j","classtime","keyword","day","dayarr","timeleng","time","push","x","y","ycolor","color","text","classname","Calculate","finalrank","root1","maxOneTable","finalTable","n","deep","max","adault","onCalculate","root","maxScoreTable","maxTable","score","maxScore","console","log","k","data","profess","classscore","a","bb"],"mappings":"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","sourcesContent":["\r\nimport React , {useState,useCallback,useEffect} from 'react';\r\nimport {useSelector,useDispatch} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom';\r\nimport Graph from '../../component/graph/Graph';\r\n\r\nimport {register} from '../../modules/write';\r\n\r\nimport Node ,{lookschedule,insertTable,composeTree ,search} from '../../lib/tree/tree';\r\nimport { tsConstructorType } from '../../../../../../../AppData/Local/Microsoft/TypeScript/3.7/node_modules/@babel/types/lib/index';\r\n\r\n\r\n// 안겹친다는 가정이 필요\r\n// 안겹치고 이 함수를 사용하면 dst 시간표에 src가 추가됨. \r\n// 시간표와, 시간표에 넣을 과목을 dst, src 차례로 주면됨\r\n//const insertTable=function(dst,src)\r\n\r\nclass mNode{\r\n\r\n    children=[];\r\n    \r\n    constructor(list){\r\n\r\n        \r\n        this.classlist=list;\r\n\r\n    }\r\n \r\n    insert(list){\r\n        let node=new mNode(list);\r\n\r\n        this.children[this.children.length]=node;\r\n        \r\n\r\n    }\r\n\r\n\r\n};\r\n\r\nconst GraphContainer=()=>{\r\n\r\n\r\n    const [TdrawList,setTdrawList]=useState([{\r\n        id:1,\r\n        name:\"회로이론\"\r\n    \r\n    },{\r\n    \r\n        id:2,\r\n        name:\"알고리즘\"\r\n    },{\r\n        id:3,\r\n        name:\"논리회로\"\r\n    \r\n    }]);\r\n\r\n\r\n    const [makingdrawList,setmakingdrawList]=useState([]);\r\n\r\n\r\n    const Delete=(id)=>{\r\n\r\n       const  aa=TdrawList.filter(e=>(e.id!==id));\r\n       \r\n       setTdrawList(aa);\r\n          \r\n      };\r\n      \r\n      \r\n      useEffect(()=>{},TdrawList);\r\n    \r\n\r\n    // const dispatch = useDispatch();\r\n\r\n    const {type1,type2,type3}=useSelector(({write})=>({\r\n\r\n       type1:write.type1,\r\n       type2:write.type2,\r\n       type3:write.type3,\r\n    }\r\n    )); \r\n\r\n    const Maintable={\r\n        type1,type2,type3\r\n    };\r\n    \r\n\r\n\r\n\r\n\r\n    // 배열로 시간표 리스트만 넘기면됨 \r\n    const makingDrawList=useCallback((arr)=>{\r\n\r\n        let makingTable=[];\r\n\r\n        for(let i=0;i<arr.length;i++){  // 한 과목씩 살펴봄\r\n\r\n            for(let j=0;j<arr[i].classtime.keyword.length;j++){  // 한 과목의 요일수\r\n                \r\n                let day;\r\n\r\n                switch(arr[i].classtime.keyword[j]){\r\n                    case 't1': day=5; break;\r\n                    case 't2': day=24; break;\r\n                    case 't3': day=43; break;\r\n                    case 't4': day=62; break;\r\n                    case 't5': day=81; break;\r\n                    default: break;\r\n\r\n                }\r\n\r\n              \r\n\r\n              let dayarr=  arr[i].classtime[arr[i].classtime.keyword[j]]; // 요일 배열\r\n                \r\n              let timeleng=dayarr.length * 3.5;\r\n              let time=9+((dayarr[0]-2)*3.5);\r\n\r\n                makingTable.push({x:day,y:time,ycolor:timeleng,color:\"#CEF6F5\",text:arr[i].classname});\r\n            \r\n            }\r\n\r\n\r\n        }\r\n        \r\n        setmakingdrawList(makingTable);\r\n\r\n\r\n    },[TdrawList]);\r\n\r\n    \r\n    //개수기반\r\n    //우선순위 1개수가 같으면 일단 그거 다출력\r\n\r\n    const Calculate=()=>{\r\n\r\n        let finalrank=[]; //최종 개수 기반 순위\r\n\r\n\r\n        const root1=composeTree('type1',Maintable);\r\n\r\n        let maxOneTable=[];    //개수 기반\r\n\r\n        \r\n        for(let i=0;i<root1.finalTable.length;i++){\r\n\r\n            \r\n            let n=root1.finalTable[i];\r\n\r\n            if(n.deep===root1.max){\r\n\r\n                maxOneTable.push(n);\r\n            }\r\n\r\n        }\r\n\r\n\r\n        //1 개수 같은것들끼리 모아둠  -> 또 경쟁\r\n\r\n        for(let i=0;i<maxOneTable.length;i++){\r\n            \r\n            \r\n\r\n            for(let j=0;j<root1.max;j++){\r\n                let n= maxOneTable[i];\r\n\r\n                n=n.adault;\r\n            }\r\n            \r\n\r\n\r\n        }\r\n        \r\n        \r\n\r\n\r\n        \r\n\r\n        \r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    const onCalculate=()=>{\r\n        \r\n        const root= composeTree('type1',Maintable,[]);\r\n        \r\n         \r\n         let maxScoreTable=[];\r\n         let maxTable=[];\r\n     \r\n         for(let i=0;i<root.finalTable.length;i++){\r\n     \r\n             let n=root.finalTable[i];\r\n     \r\n            if(n.score===root.maxScore){\r\n     \r\n             maxScoreTable.push(n);\r\n     \r\n     \r\n            }    \r\n     \r\n     \r\n            if(n.deep===root.max){\r\n     \r\n             maxTable.push(n);\r\n            }\r\n     \r\n         }\r\n         console.log('&&&&&&&&&&&&&&&학점 우선 시간표&&&&&&&&&&&&&&');\r\n         for(let i=0;i<maxScoreTable.length;i++){\r\n     \r\n             let n=maxScoreTable[i];\r\n             let k=n.deep;\r\n             console.log('--------%d번째 시간표----------',i+1);\r\n             for(let j=0;j<k;j++){\r\n     \r\n                 console.log('%d:%s %s %d ',j+1,n.data.classname,n.data.profess,n.data.classscore);\r\n     \r\n                 n=n.adault;\r\n             }\r\n     \r\n             console.log('[총 %d학점]',root.maxScore);\r\n             console.log('---------------------------');\r\n     \r\n         }\r\n     \r\n     \r\n         console.log('&&&&&&&&&&&&&&&과목개수 우선 시간표&&&&&&&&&&&&&&');\r\n     \r\n        for(let i=0;i<maxTable.length;i++)\r\n        {\r\n            let n=maxTable[i];\r\n            let a=n.score;\r\n            console.log('--------%d번째 시간표----------',i+1);\r\n             for(let j=0;j<root.max;j++)\r\n             {   \r\n                \r\n                 console.log('%d:%s %s %d',j+1 ,n.data.classname,n.data.profess,n.data.classscore);\r\n                 n=n.adault;\r\n     \r\n             }\r\n             console.log('[총%d학점]',a);\r\n             console.log('---------------------------');\r\n        }\r\n        \r\n        let a=maxTable[0];\r\n        let bb=[];\r\n        for(let i=0;i<root.max;i++){\r\n\r\n            bb.push(a.data);\r\n            a=a.adault;\r\n\r\n\r\n        }\r\n        makingDrawList(bb);\r\n\r\n\r\n     };\r\n\r\n     \r\n\r\n\r\n    return (\r\n        <Graph onCalculate={onCalculate}\r\n            TdrawList={TdrawList}\r\n            Delete={Delete}\r\n            makingdrawList={makingdrawList}\r\n            >\r\n\r\n            </Graph>\r\n    );\r\n\r\n\r\n};\r\n\r\n\r\nexport default GraphContainer;"]},"metadata":{},"sourceType":"module"}