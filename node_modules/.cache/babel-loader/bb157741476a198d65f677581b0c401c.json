{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\ReactProject\\\\sugang-scheduler\\\\sugang-frontend\\\\src\\\\containers\\\\graph\\\\GraphContainer.js\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport Graph from '../../component/graph/Graph';\nimport { register } from '../../modules/write';\nimport Node, { lookschedule, insertTable, composeTree, search } from '../../lib/tree/tree';\n\nconst GraphContainer = () => {\n  const dispatch = useDispatch();\n  const {\n    type1,\n    type2,\n    type3\n  } = useSelector(({\n    write\n  }) => ({\n    type1: write.type1,\n    type2: write.type2,\n    type3: write.type3\n  }));\n  const Maintable = {\n    type1,\n    type2,\n    type3\n  };\n\n  const onCalculate = () => {\n    const root = composeTree('type1', Maintable); //먼저 type1 로 root 만들고\n    //학점이 남으면 type2로 root만듬\n    //그래도 학점이 남으면 type3으로 root 만듬.\n\n    let maxScoreTable = [];\n    let maxTable = [];\n\n    for (let i = 0; i < root.finalTable.length; i++) {\n      let n = root.finalTable[i];\n\n      if (n.score === root.maxScore) {\n        maxScoreTable.push(n);\n      }\n\n      if (n.deep === root.max) {\n        maxTable.push(n);\n      }\n    }\n\n    console.log('&&&&&&&&&&&&&&&학점 우선 시간표&&&&&&&&&&&&&&');\n\n    for (let i = 0; i < maxScoreTable.length; i++) {\n      let n = maxScoreTable[i];\n      let k = n.deep;\n      console.log('--------%d번째 시간표----------', i + 1);\n\n      for (let j = 0; j < k; j++) {\n        console.log('%d:%s %s %d ', j + 1, n.data.classname, n.data.profess, n.data.classscore);\n        n = n.adault;\n      }\n\n      console.log('[총 %d학점]', root.maxScore);\n      console.log('---------------------------');\n    }\n\n    console.log('&&&&&&&&&&&&&&&과목개수 우선 시간표&&&&&&&&&&&&&&');\n\n    for (let i = 0; i < maxTable.length; i++) {\n      let n = maxTable[i];\n      let a = n.score;\n      console.log('--------%d번째 시간표----------', i + 1);\n\n      for (let j = 0; j < root.max; j++) {\n        console.log('%d:%s %s %d', j + 1, n.data.classname, n.data.profess, n.data.classscore);\n        n = n.adault;\n      }\n\n      console.log('[총%d학점]', a);\n      console.log('---------------------------');\n    }\n  };\n\n  return React.createElement(Graph, {\n    onCalculate: onCalculate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  });\n};\n\nexport default GraphContainer;","map":{"version":3,"sources":["C:/Users/user/Desktop/ReactProject/sugang-scheduler/sugang-frontend/src/containers/graph/GraphContainer.js"],"names":["React","useState","useCallback","useEffect","useSelector","useDispatch","withRouter","Graph","register","Node","lookschedule","insertTable","composeTree","search","GraphContainer","dispatch","type1","type2","type3","write","Maintable","onCalculate","root","maxScoreTable","maxTable","i","finalTable","length","n","score","maxScore","push","deep","max","console","log","k","j","data","classname","profess","classscore","adault","a"],"mappings":"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","sourcesContent":["\r\nimport React , {useState,useCallback,useEffect} from 'react';\r\nimport {useSelector,useDispatch} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom';\r\nimport Graph from '../../component/graph/Graph';\r\n\r\nimport {register} from '../../modules/write';\r\n\r\nimport Node ,{lookschedule,insertTable,composeTree ,search} from '../../lib/tree/tree';\r\n\r\n\r\n\r\nconst GraphContainer=()=>{\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const {type1,type2,type3}=useSelector(({write})=>({\r\n\r\n       type1:write.type1,\r\n       type2:write.type2,\r\n       type3:write.type3,\r\n    }\r\n    )); \r\n\r\n    const Maintable={\r\n        type1,type2,type3\r\n    };\r\n    \r\n\r\n    \r\n    const onCalculate=()=>{\r\n        \r\n        \r\n   \r\n        const root= composeTree('type1',Maintable);\r\n        \r\n         //먼저 type1 로 root 만들고\r\n         //학점이 남으면 type2로 root만듬\r\n         //그래도 학점이 남으면 type3으로 root 만듬.\r\n         \r\n         let maxScoreTable=[];\r\n         let maxTable=[];\r\n     \r\n         for(let i=0;i<root.finalTable.length;i++){\r\n     \r\n             let n=root.finalTable[i];\r\n     \r\n            if(n.score===root.maxScore){\r\n     \r\n             maxScoreTable.push(n);\r\n     \r\n     \r\n            }    \r\n     \r\n     \r\n            if(n.deep===root.max){\r\n     \r\n             maxTable.push(n);\r\n            }\r\n     \r\n         }\r\n         console.log('&&&&&&&&&&&&&&&학점 우선 시간표&&&&&&&&&&&&&&');\r\n         for(let i=0;i<maxScoreTable.length;i++){\r\n     \r\n             let n=maxScoreTable[i];\r\n             let k=n.deep;\r\n             console.log('--------%d번째 시간표----------',i+1);\r\n             for(let j=0;j<k;j++){\r\n     \r\n                 console.log('%d:%s %s %d ',j+1,n.data.classname,n.data.profess,n.data.classscore);\r\n     \r\n                 n=n.adault;\r\n             }\r\n     \r\n             console.log('[총 %d학점]',root.maxScore);\r\n             console.log('---------------------------');\r\n     \r\n         }\r\n     \r\n     \r\n         console.log('&&&&&&&&&&&&&&&과목개수 우선 시간표&&&&&&&&&&&&&&');\r\n     \r\n        for(let i=0;i<maxTable.length;i++)\r\n        {\r\n            let n=maxTable[i];\r\n            let a=n.score;\r\n            console.log('--------%d번째 시간표----------',i+1);\r\n             for(let j=0;j<root.max;j++)\r\n             {   \r\n                \r\n                 console.log('%d:%s %s %d',j+1 ,n.data.classname,n.data.profess,n.data.classscore);\r\n                 n=n.adault;\r\n     \r\n             }\r\n             console.log('[총%d학점]',a);\r\n             console.log('---------------------------');\r\n        }\r\n     \r\n     };\r\n\r\n    \r\n\r\n\r\n    return (\r\n        <Graph onCalculate={onCalculate}></Graph>\r\n    );\r\n\r\n\r\n};\r\n\r\n\r\nexport default GraphContainer;"]},"metadata":{},"sourceType":"module"}