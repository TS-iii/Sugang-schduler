{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\ReactProject\\\\sugang-scheduler\\\\sugang-frontend\\\\src\\\\containers\\\\graph\\\\GraphContainers.js\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport Graphy from '../../component/graph/Graphy';\nimport { register } from '../../modules/write';\nimport { mainTree, lookschedule } from '../../lib/tree/tree1'; // 안겹친다는 가정이 필요\n// 안겹치고 이 함수를 사용하면 dst 시간표에 src가 추가됨. \n// 시간표와, 시간표에 넣을 과목을 dst, src 차례로 주면됨\n//const insertTable=function(dst,src)\n\nconst GraphContainer = () => {\n  //TdrawList랑 addlist id는 배열의 인덱스랑 같음 \n  const [TdrawList, setTdrawList] = useState([]); // 현재 신청된 목록들  (/graph 상단 목록에 영향)\n  //{data: , id: }\n\n  const [addlist, setaddlist] = useState([]); // 현재 추가 가능한 목록들 (/graph 하단 목록에 영향 )\n  // {data: id: }\n\n  const [makingdrawList, setmakingdrawList] = useState([]); // 현재 신청된 목록의 시간표 좌표 구현\n\n  const [allList, setallList] = useState([]);\n  const [nownum, setnownum] = useState(0);\n  const [click, setclick] = useState([]); // 대안 루트 (id)는 실패했을 경우 \n\n  const NextRoot = id => {\n    let bb = [];\n    let tf = false;\n    let data = TdrawList.find(c => c.id === id);\n\n    if (click.length === 0) {\n      bb.push(data);\n      setclick(bb);\n      tf = false;\n    } else {\n      for (let i = 0; i < click.length; i++) {\n        if (click[i].id !== id) {\n          bb.push(click[i]);\n        }\n      }\n\n      if (bb.length !== click.length) {\n        tf = true;\n        setclick(bb);\n      } else {\n        tf = false;\n        bb.push(data);\n        setclick(bb);\n      }\n    }\n\n    let kk = [];\n    if (tf === false) kk = TdrawList.map(c => c.id !== id);else kk = TdrawList;\n    let aa = kk.concat(bb);\n    console.log(\"시작\");\n    console.log(aa);\n    const fflist = mainTree(Maintable, aa);\n    let list = [];\n\n    for (let i = 0; i < fflist.length; i++) {\n      list.push(fflist[i].concat(kk));\n    }\n\n    console.log(\"야야야야야야\");\n    console.log(bb);\n    setallList(list);\n  }; // 현재 시간표에서 삭제 버튼 클릭시 함수 호출 \n\n\n  const Delete = id => {\n    const aa = TdrawList.filter(e => e.id !== id); // 일단 삭제할 id찾아서 지운배열을 aa에 전달\n\n    setTdrawList(aa); // 그리고 TdrawList에 적용\n\n    let addtemp = []; // 추가가능한 과목들 배열 만듬\n    // 여기서부터는 1,2,3순위 입력된 모든 과목들중에 aa에 있는 과목을 제외하고 추가로 신청 가능한 과목이 있는지 살펴봄.\n\n    for (let j = 0; j < type1.length; j++) {\n      // type1부터 살펴봄\n      let i = 0;\n\n      for (i = 0; i < aa.length; i++) // aa는 현재 선택된 시간표 \n      {\n        if (aa[i].classname === type1[j].classname) // 같은 과목은 동시 수강 못하므로 \n          break;\n        if (!lookschedule(aa[i].classtime, type1[j].classtime)) break; // 시간표가 중복되면 동시 수강 못하므로 \n      }\n\n      if (i === aa.length) {\n        // 최종적으로 수강 가능한 과목이면\n        addtemp.push(type1[j]); // addtemp에 넣음.\n      }\n    }\n\n    for (let j = 0; j < type2.length; j++) {\n      let i = 0;\n\n      for (i = 0; i < aa.length; i++) {\n        if (aa[i].classname === type2[j].classname) break;\n        if (!lookschedule(aa[i].classtime, type2[j].classtime)) break;\n      }\n\n      if (i === aa.length) {\n        addtemp.push(type2[j]);\n      }\n    }\n\n    for (let j = 0; j < type3.length; j++) {\n      let i = 0;\n\n      for (i = 0; i < aa.length; i++) {\n        if (aa[i].classname === type3[j].classname) break;\n        if (!lookschedule(aa[i].classtime, type3[j].classtime)) break;\n      }\n\n      if (i === aa.length) {\n        addtemp.push(type3[j]);\n      }\n    }\n\n    setaddlist(addtemp);\n  };\n\n  const Add = id => {\n    let aa = [];\n    let data = addlist.find(c => c.id === id);\n    if (TdrawList.length !== 0) // 과목 개수가 0이 아니면\n      aa = [...TdrawList, data]; // 기존 과목배열에 신규 과목 추가 \n    else aa.push(data); // 현재 과목 개수가 0이면 그냥 추가 \n\n    let bb = [];\n\n    for (let i = 0; i < addlist.length; i++) {\n      if (addlist[i].id !== id) {\n        if (addlist[i].classname !== data.classname) {\n          if (lookschedule(addlist[i].classtime, data.classtime)) {\n            bb.push(addlist[i]);\n          }\n        }\n      }\n    }\n\n    setaddlist(bb);\n    setTdrawList(aa);\n  }; // const dispatch = useDispatch();\n\n\n  const {\n    type1,\n    type2,\n    type3\n  } = useSelector(({\n    write\n  }) => ({\n    type1: write.type1,\n    type2: write.type2,\n    type3: write.type3\n  }));\n  const Maintable = {\n    type1,\n    type2,\n    type3\n  };\n  useEffect(() => makingDrawList(), [TdrawList]);\n  useEffect(() => finalprint(), [allList]); // 배열로 시간표 리스트만 넘기면됨 \n  // 얘는 TdrawList를 살펴보고 과목당 시간을 적절히 출력할 수 있게 숫자로 바꿔줌\n\n  const makingDrawList = useCallback(() => {\n    let makingTable = [];\n\n    for (let i = 0; i < TdrawList.length; i++) {\n      // 한 과목씩 살펴봄\n      for (let j = 0; j < TdrawList[i].classtime.keyword.length; j++) {\n        // 한 과목의 요일수\n        let day;\n\n        switch (TdrawList[i].classtime.keyword[j]) {\n          case 't1':\n            day = 5;\n            break;\n\n          case 't2':\n            day = 24;\n            break;\n\n          case 't3':\n            day = 43;\n            break;\n\n          case 't4':\n            day = 62;\n            break;\n\n          case 't5':\n            day = 81;\n            break;\n\n          default:\n            break;\n        }\n\n        let dayarr = TdrawList[i].classtime[TdrawList[i].classtime.keyword[j]]; // 요일 배열\n\n        let timeleng = dayarr.length * 3.5;\n        let time = 9 + (dayarr[0] - 2) * 3.5;\n        makingTable.push({\n          x: day,\n          y: time,\n          ycolor: timeleng,\n          color: \"#CEF6F5\",\n          text: TdrawList[i].classname\n        });\n      }\n    }\n\n    console.log(makingTable);\n    setmakingdrawList(makingTable);\n  }, [TdrawList]);\n\n  const Calculate = () => {\n    const fflist = mainTree(Maintable, []);\n    setallList(fflist);\n  };\n\n  const finalprint = () => {\n    let kkk = [];\n\n    if (allList.length !== 0) {\n      for (let i = 0; i < allList[nownum].length; i++) {\n        let tt = allList[nownum][i];\n        kkk.push(tt);\n      }\n\n      setTdrawList(kkk);\n    }\n  };\n\n  const next = () => {\n    if (allList.length - 1 === nownum) {\n      setnownum(0);\n    } else {\n      setnownum(nownum + 1);\n    }\n\n    finalprint();\n  };\n\n  const previous = () => {\n    if (nownum > 0) {\n      setnownum(nownum - 1);\n      finalprint();\n    }\n  };\n\n  return React.createElement(Graphy, {\n    TdrawList: TdrawList,\n    Delete: Delete,\n    makingdrawList: makingdrawList,\n    Calculate: Calculate,\n    next: next,\n    previous: previous,\n    Add: Add,\n    addlist: addlist,\n    NextRoot: NextRoot,\n    click: click,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395\n    },\n    __self: this\n  });\n};\n\nexport default GraphContainer;","map":{"version":3,"sources":["C:/Users/user/Desktop/ReactProject/sugang-scheduler/sugang-frontend/src/containers/graph/GraphContainers.js"],"names":["React","useState","useCallback","useEffect","useSelector","useDispatch","withRouter","Graphy","register","mainTree","lookschedule","GraphContainer","TdrawList","setTdrawList","addlist","setaddlist","makingdrawList","setmakingdrawList","allList","setallList","nownum","setnownum","click","setclick","NextRoot","id","bb","tf","data","find","c","length","push","i","kk","map","aa","concat","console","log","fflist","Maintable","list","Delete","filter","e","addtemp","j","type1","classname","classtime","type2","type3","Add","write","makingDrawList","finalprint","makingTable","keyword","day","dayarr","timeleng","time","x","y","ycolor","color","text","Calculate","kkk","tt","next","previous"],"mappings":"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","sourcesContent":["\r\nimport React , {useState,useCallback,useEffect} from 'react';\r\nimport {useSelector,useDispatch} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom';\r\nimport Graphy from '../../component/graph/Graphy';\r\n\r\nimport {register} from '../../modules/write';\r\n\r\n\r\nimport  { mainTree,lookschedule} from '../../lib/tree/tree1';\r\n\r\n\r\n// 안겹친다는 가정이 필요\r\n// 안겹치고 이 함수를 사용하면 dst 시간표에 src가 추가됨. \r\n// 시간표와, 시간표에 넣을 과목을 dst, src 차례로 주면됨\r\n//const insertTable=function(dst,src)\r\n\r\n\r\n\r\nconst GraphContainer=()=>{\r\n\r\n\r\n\r\n    //TdrawList랑 addlist id는 배열의 인덱스랑 같음 \r\n    const [TdrawList,setTdrawList]=useState([]);    // 현재 신청된 목록들  (/graph 상단 목록에 영향)\r\n    //{data: , id: }\r\n    const [addlist,setaddlist]=useState([]);    // 현재 추가 가능한 목록들 (/graph 하단 목록에 영향 )\r\n    // {data: id: }\r\n\r\n    const [makingdrawList,setmakingdrawList]=useState([]); // 현재 신청된 목록의 시간표 좌표 구현\r\n\r\n    const [allList,setallList]=useState([]);    \r\n\r\n    const [nownum,setnownum]=useState(0);   \r\n\r\n\r\n    const [click,setclick]=useState([]);\r\n    \r\n    \r\n\r\n    // 대안 루트 (id)는 실패했을 경우 \r\n    const NextRoot=(id)=>{\r\n        \r\n        let bb=[];\r\n\r\n        let tf=false;\r\n\r\n        let data=TdrawList.find(c=>c.id===id);\r\n\r\n        if(click.length===0)\r\n            {\r\n                bb.push(data);\r\n                setclick(bb);\r\n                tf=false;\r\n            }\r\n        else{\r\n\r\n        for(let i=0;i<click.length;i++){\r\n\r\n            \r\n            if(click[i].id!==id)\r\n                {\r\n                   bb.push(click[i]);\r\n\r\n                }\r\n            \r\n\r\n        }\r\n        \r\n       \r\n\r\n        if(bb.length!==click.length){\r\n                tf=true;\r\n                setclick(bb);        \r\n            \r\n        }\r\n\r\n        else{\r\n            tf=false;\r\n            bb.push(data);\r\n\r\n            setclick(bb);\r\n\r\n        }\r\n\r\n         }\r\n\r\n\r\n         let kk=[];\r\n         if(tf===false)\r\n            kk=TdrawList.map(c=>c.id!==id);\r\n        else \r\n            kk=TdrawList;\r\n\r\n        let aa=kk.concat(bb);\r\n         \r\n        \r\n         console.log(\"시작\");\r\n         console.log(aa);\r\n         \r\n        const fflist=mainTree(Maintable,aa);\r\n         \r\n        let list=[];\r\n        for(let i=0;i<fflist.length;i++){\r\n\r\n            list.push(fflist[i].concat(kk));\r\n\r\n        \r\n        }\r\n\r\n        console.log(\"야야야야야야\");\r\n        console.log(bb);\r\n\r\n        setallList(list);\r\n\r\n    };\r\n\r\n\r\n\r\n    // 현재 시간표에서 삭제 버튼 클릭시 함수 호출 \r\n    const Delete=(id)=>{\r\n\r\n       const aa=TdrawList.filter(e=>(e.id!==id));  // 일단 삭제할 id찾아서 지운배열을 aa에 전달\r\n\r\n\r\n\r\n\r\n       setTdrawList(aa);    // 그리고 TdrawList에 적용\r\n\r\n       let addtemp=[];      // 추가가능한 과목들 배열 만듬\r\n    \r\n      \r\n\r\n       // 여기서부터는 1,2,3순위 입력된 모든 과목들중에 aa에 있는 과목을 제외하고 추가로 신청 가능한 과목이 있는지 살펴봄.\r\n       for(let j=0;j<type1.length;j++){ // type1부터 살펴봄\r\n\r\n        let i=0;\r\n        for(i=0;i<aa.length;i++)    // aa는 현재 선택된 시간표 \r\n        {\r\n        if(aa[i].classname===type1[j].classname)   // 같은 과목은 동시 수강 못하므로 \r\n                    break;\r\n        if(!lookschedule(aa[i].classtime,type1[j].classtime))\r\n                break;  // 시간표가 중복되면 동시 수강 못하므로 \r\n                \r\n\r\n\r\n        }\r\n\r\n        if(i===aa.length){  // 최종적으로 수강 가능한 과목이면\r\n            addtemp.push(type1[j]);    // addtemp에 넣음.\r\n          \r\n        }\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n       \r\n        for(let j=0;j<type2.length;j++){\r\n\r\n            let i=0;\r\n            for(i=0;i<aa.length;i++)\r\n            {\r\n            if(aa[i].classname===type2[j].classname)\r\n                        break;\r\n            if(!lookschedule(aa[i].classtime,type2[j].classtime))\r\n                    break;\r\n                    \r\n    \r\n    \r\n            }\r\n    \r\n            if(i===aa.length){\r\n                addtemp.push(type2[j]);\r\n             \r\n    \r\n            }\r\n    \r\n    \r\n    \r\n            }\r\n\r\n\r\n            for(let j=0;j<type3.length;j++){\r\n\r\n                let i=0;\r\n                for(i=0;i<aa.length;i++)\r\n                {\r\n                if(aa[i].classname===type3[j].classname)\r\n                            break;\r\n                if(!lookschedule(aa[i].classtime,type3[j].classtime))\r\n                        break;\r\n                        \r\n        \r\n        \r\n                }\r\n        \r\n                if(i===aa.length){\r\n                    addtemp.push(type3[j]);\r\n                    \r\n        \r\n                }\r\n        \r\n        \r\n        \r\n                }\r\n    \r\n        setaddlist(addtemp);\r\n          \r\n      };\r\n\r\n      \r\n      const Add=(id)=>{\r\n\r\n        \r\n\r\n        let aa=[];\r\n\r\n        let data=addlist.find(c=>c.id===id);\r\n\r\n        if(TdrawList.length!==0)    // 과목 개수가 0이 아니면\r\n             aa=[...TdrawList,data]; // 기존 과목배열에 신규 과목 추가 \r\n        else\r\n            aa.push(data);    // 현재 과목 개수가 0이면 그냥 추가 \r\n\r\n\r\n\r\n     \r\n        let bb=[];\r\n     \r\n      \r\n        for(let i=0;i<addlist.length;i++){\r\n            if(addlist[i].id!==id){\r\n                if(addlist[i].classname!==data.classname){\r\n                    if(lookschedule(addlist[i].classtime,data.classtime))\r\n                        {\r\n                            bb.push(addlist[i]);\r\n                         \r\n                        }\r\n\r\n                }\r\n          \r\n            }\r\n\r\n\r\n        }\r\n      \r\n        setaddlist(bb);\r\n        setTdrawList(aa);\r\n\r\n\r\n      };\r\n    \r\n      \r\n      \r\n    \r\n\r\n    // const dispatch = useDispatch();\r\n\r\n    const {type1,type2,type3}=useSelector(({write})=>({\r\n\r\n       type1:write.type1,\r\n       type2:write.type2,\r\n       type3:write.type3,\r\n    }\r\n    )); \r\n\r\n    const Maintable={\r\n        type1,type2,type3\r\n    };\r\n    \r\n\r\n\r\nuseEffect(()=>makingDrawList(),[TdrawList]);\r\nuseEffect(()=>finalprint(),[allList]);\r\n\r\n    // 배열로 시간표 리스트만 넘기면됨 \r\n\r\n    // 얘는 TdrawList를 살펴보고 과목당 시간을 적절히 출력할 수 있게 숫자로 바꿔줌\r\n    const makingDrawList=useCallback(()=>{\r\n\r\n        let makingTable=[];\r\n\r\n        for(let i=0;i<TdrawList.length;i++){  // 한 과목씩 살펴봄\r\n\r\n            for(let j=0;j<TdrawList[i].classtime.keyword.length;j++){  // 한 과목의 요일수\r\n                \r\n                let day;\r\n\r\n                switch(TdrawList[i].classtime.keyword[j]){\r\n                    case 't1': day=5; break;\r\n                    case 't2': day=24; break;\r\n                    case 't3': day=43; break;\r\n                    case 't4': day=62; break;\r\n                    case 't5': day=81; break;\r\n                    default: break;\r\n\r\n                }\r\n\r\n              \r\n\r\n              let dayarr=  TdrawList[i].classtime[TdrawList[i].classtime.keyword[j]]; // 요일 배열\r\n                \r\n              let timeleng=dayarr.length * 3.5;\r\n              let time=9+((dayarr[0]-2)*3.5);\r\n\r\n                makingTable.push({x:day,y:time,ycolor:timeleng,color:\"#CEF6F5\",text:TdrawList[i].classname});\r\n            \r\n            }\r\n\r\n\r\n        }\r\n        \r\n        console.log(makingTable);\r\n        setmakingdrawList(makingTable);\r\n\r\n\r\n    },[TdrawList]);\r\n\r\n    \r\n\r\n    const Calculate=()=>{\r\n\r\n\r\n        const fflist=mainTree(Maintable,[]);\r\n\r\n        setallList(fflist);\r\n    \r\n\r\n    };\r\n\r\n    \r\n\r\n    const finalprint=()=>{\r\n\r\n        let kkk=[];\r\n        if(allList.length!==0){\r\n\r\n            \r\n        for(let i=0;i<allList[nownum].length;i++){\r\n\r\n            let tt=allList[nownum][i];\r\n\r\n            kkk.push(tt);\r\n\r\n\r\n        }\r\n\r\n        setTdrawList(kkk);\r\n\r\n    }\r\n\r\n    };\r\n    \r\n\r\n    const next=()=>{\r\n\r\n        if(allList.length -1 === nownum  ){\r\n\r\n            setnownum(0);\r\n\r\n           \r\n        }\r\n\r\n        else {\r\n\r\n            setnownum(nownum+1);\r\n            \r\n\r\n        }\r\n finalprint();\r\n\r\n    };\r\n\r\n    const previous=()=>{\r\n\r\n        if(nownum>0){\r\n\r\n            setnownum(nownum-1);\r\n            finalprint();\r\n\r\n        }\r\n\r\n        \r\n\r\n    };\r\n\r\n     \r\n\r\n\r\n    return (\r\n        <Graphy \r\n            TdrawList={TdrawList}\r\n            Delete={Delete}\r\n            makingdrawList={makingdrawList}\r\n            Calculate={Calculate}\r\n            next={next}\r\n            previous={previous}\r\n            Add={Add}\r\n            addlist={addlist}\r\n            NextRoot={NextRoot}\r\n            click={click}\r\n            >\r\n\r\n            </Graphy>\r\n    );\r\n\r\n\r\n};\r\n\r\n\r\nexport default GraphContainer;"]},"metadata":{},"sourceType":"module"}