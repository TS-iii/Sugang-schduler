{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\ReactProject\\\\sugang-scheduler\\\\sugang-frontend\\\\src\\\\containers\\\\graph\\\\GraphContainer.js\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport Graph from '../../component/graph/Graph';\nimport { mainTree, lookschedule } from '../../lib/tree/tree'; // 안겹친다는 가정이 필요\n// 안겹치고 이 함수를 사용하면 dst 시간표에 src가 추가됨. \n// 시간표와, 시간표에 넣을 과목을 dst, src 차례로 주면됨\n//const insertTable=function(dst,src)\n\nconst GraphContainer = () => {\n  //TdrawList랑 addlist id는 배열의 인덱스랑 같음 \n  const [TdrawList, setTdrawList] = useState([]); // 현재 신청된 목록들  (/graph 상단 목록에 영향)\n  //{data: , id: }\n\n  const [makingdrawList, setmakingdrawList] = useState([]); // 현재 신청된 목록의 시간표 좌표 구현\n\n  const [allList, setallList] = useState([]);\n  const [nownum, setnownum] = useState(0);\n  const [click, setclick] = useState([]);\n  const [maindata, setmaindata] = useState([]); // 대안 루트 (id)는 실패했을 경우 \n  //TdrawList에 의존적\n  // click에 의존적 \n\n  const NextRoot = id => {\n    let bb = [];\n    let maindatas = [];\n    let data;\n    data = maindata.find(c => c.id === id);\n\n    if (data) {\n      maindatas = maindata.filter(c => c.id !== id);\n      bb = click.concat(data);\n    } else {\n      data = click.find(c => c.id === id);\n\n      if (data) {\n        bb = click.filter(c => c.id !== id);\n        maindatas = maindata.concat(data);\n      }\n    }\n\n    console.log(\"시작\"); //기존 고정맴버랑 실패된 과목 빼고 시간표짬.\n\n    const fflist = mainTree(Maintable, maindatas, bb);\n    let list = []; // 그리고 기존 고정맴버 추가\n\n    if (fflist.length === 0) list.push(maindatas);else {\n      for (let i = 0; i < fflist.length; i++) {\n        list.push(fflist[i].concat(maindatas));\n      }\n    }\n    setclick(bb);\n    setmaindata(maindatas);\n    setnownum(0); // console.log(\"메인데이터!\");\n    // console.log(maindatas);\n    // console.log(\"클릭\");\n    // console.log(bb);\n    // console.log(\"fflist\");\n    // console.log(fflist);\n\n    setallList(list);\n    finalprint(list, 0, true); // 그리고 적용 setnownum이 적용된 후 setallList가 적용됨\n    // setworld(false,()=>setnownum(0,()=>setallList(list)));\n    // console.log(\"리스트출력한다!\");\n    // console.log(list);\n  }; // 현재 시간표에서 삭제 버튼 클릭시 함수 호출 \n\n\n  const {\n    type1,\n    type2,\n    type3\n  } = useSelector(({\n    write\n  }) => ({\n    type1: write.type1,\n    type2: write.type2,\n    type3: write.type3\n  }));\n  const Maintable = {\n    type1,\n    type2,\n    type3\n  }; // useEffect(()=>makingDrawList(),[TdrawList]);\n  // useEffect(()=>finalprint(),[allList]);\n  // 배열로 시간표 리스트만 넘기면됨 \n\n  useEffect(() => makingDrawList([], -1), [TdrawList]); // 얘는 TdrawList를 살펴보고 과목당 시간을 적절히 출력할 수 있게 숫자로 바꿔줌\n\n  const makingDrawList = (something, index) => {\n    if (something.length === 0) something = TdrawList;\n\n    if (index !== -1) {\n      setnownum(index);\n    }\n\n    let makingTable = [];\n\n    for (let i = 0; i < something.length; i++) {\n      // 한 과목씩 살펴봄\n      for (let j = 0; j < something[i].classtime.keyword.length; j++) {\n        // 한 과목의 요일수\n        let day;\n\n        switch (something[i].classtime.keyword[j]) {\n          case 't1':\n            day = 5;\n            break;\n\n          case 't2':\n            day = 24;\n            break;\n\n          case 't3':\n            day = 43;\n            break;\n\n          case 't4':\n            day = 62;\n            break;\n\n          case 't5':\n            day = 81;\n            break;\n\n          default:\n            break;\n        }\n\n        let dayarr = something[i].classtime[something[i].classtime.keyword[j]]; // 요일 배열\n\n        let timeleng = dayarr.length * 3.5;\n        let time = 9 + (dayarr[0] - 2) * 3.5;\n        makingTable.push({\n          x: day,\n          y: time,\n          ycolor: timeleng,\n          color: \"#CEF6F5\",\n          text: something[i].classname\n        });\n      }\n    }\n\n    setmakingdrawList(makingTable);\n  };\n\n  const Calculate = () => {\n    const fflist = mainTree(Maintable, [], []);\n    setnownum(0);\n    setclick([]);\n    setmaindata([...fflist[0]]);\n    setallList(fflist);\n    finalprint(fflist, 0, false);\n  };\n\n  const finalprint = (list, num, c) => {\n    let kkk = [];\n\n    if (list.length !== 0) {\n      for (let i = 0; i < list[num].length; i++) {\n        let tt = list[num][i];\n        kkk.push(tt);\n      }\n\n      if (c === false) {\n        setmaindata([...list[num]]);\n      }\n\n      setTdrawList(kkk);\n    }\n  };\n\n  const next = () => {\n    let num = nownum;\n\n    if (allList.length - 1 === nownum) {// setnownum(0);\n    } else {\n      num = nownum + 1;\n      setnownum(nownum + 1);\n    }\n\n    if (click.length === 0) finalprint(allList, num, false);else finalprint(allList, num, true);\n  };\n\n  const previous = () => {\n    if (nownum > 0) {\n      let num = nownum - 1;\n      setnownum(nownum - 1);\n      if (click.length === 0) finalprint(allList, num, false);else finalprint(allList, num, true);\n    }\n  };\n\n  return React.createElement(Graph, {\n    TdrawList: TdrawList,\n    makingdrawList: makingdrawList,\n    Calculate: Calculate,\n    next: next,\n    previous: previous,\n    NextRoot: NextRoot,\n    click: click,\n    maindata: maindata,\n    allList: allList,\n    makingDrawList: makingDrawList,\n    nownum: nownum,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284\n    },\n    __self: this\n  });\n};\n\nexport default GraphContainer;","map":{"version":3,"sources":["C:/Users/user/Desktop/ReactProject/sugang-scheduler/sugang-frontend/src/containers/graph/GraphContainer.js"],"names":["React","useState","useCallback","useEffect","useSelector","Graph","mainTree","lookschedule","GraphContainer","TdrawList","setTdrawList","makingdrawList","setmakingdrawList","allList","setallList","nownum","setnownum","click","setclick","maindata","setmaindata","NextRoot","id","bb","maindatas","data","find","c","filter","concat","console","log","fflist","Maintable","list","length","push","i","finalprint","type1","type2","type3","write","makingDrawList","something","index","makingTable","j","classtime","keyword","day","dayarr","timeleng","time","x","y","ycolor","color","text","classname","Calculate","num","kkk","tt","next","previous"],"mappings":"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","sourcesContent":["\r\nimport React , {useState,useCallback,useEffect} from 'react';\r\nimport {useSelector} from 'react-redux';\r\n\r\nimport Graph from '../../component/graph/Graph';\r\n\r\nimport  { mainTree,lookschedule} from '../../lib/tree/tree';\r\n\r\n\r\n\r\n// 안겹친다는 가정이 필요\r\n// 안겹치고 이 함수를 사용하면 dst 시간표에 src가 추가됨. \r\n// 시간표와, 시간표에 넣을 과목을 dst, src 차례로 주면됨\r\n//const insertTable=function(dst,src)\r\n\r\n\r\n\r\nconst GraphContainer=()=>{\r\n\r\n\r\n\r\n    //TdrawList랑 addlist id는 배열의 인덱스랑 같음 \r\n    const [TdrawList,setTdrawList]=useState([]);    // 현재 신청된 목록들  (/graph 상단 목록에 영향)\r\n    //{data: , id: }\r\n\r\n\r\n    const [makingdrawList,setmakingdrawList]=useState([]); // 현재 신청된 목록의 시간표 좌표 구현\r\n\r\n    const [allList,setallList]=useState([]);    \r\n\r\n    const [nownum,setnownum]=useState(0);   \r\n\r\n\r\n    const [click,setclick]=useState([]);\r\n    const [maindata,setmaindata]=useState([]);\r\n\r\n\r\n\r\n\r\n    // 대안 루트 (id)는 실패했을 경우 \r\n    \r\n    //TdrawList에 의존적\r\n    // click에 의존적 \r\n     \r\n    const NextRoot=(id)=>{\r\n        \r\n        let bb=[];\r\n\r\n        \r\n\r\n        let maindatas=[];\r\n        let data;\r\n        data=maindata.find(c=>c.id===id);\r\n\r\n        if(data){\r\n            maindatas=maindata.filter(c=>c.id!==id);\r\n            bb=click.concat(data);\r\n             \r\n        }\r\n\r\n        else{\r\n            data=click.find(c=>c.id===id);\r\n            if(data){\r\n\r\n                bb=click.filter(c=>c.id!==id);\r\n                maindatas=maindata.concat(data);\r\n                \r\n            }\r\n\r\n        }\r\n\r\n\r\n         console.log(\"시작\");\r\n       \r\n         //기존 고정맴버랑 실패된 과목 빼고 시간표짬.\r\n        const fflist=mainTree(Maintable,maindatas,bb);\r\n         \r\n        let list=[];\r\n         // 그리고 기존 고정맴버 추가\r\n        if(fflist.length===0)\r\n         list.push(maindatas);\r\n\r\n            \r\n        else{\r\n        for(let i=0;i<fflist.length;i++){\r\n\r\n            list.push(fflist[i].concat(maindatas));\r\n\r\n        \r\n        }\r\n        }\r\n\r\n        setclick(bb);\r\n        setmaindata(maindatas);\r\n        setnownum(0);\r\n        \r\n        // console.log(\"메인데이터!\");\r\n        // console.log(maindatas);\r\n        // console.log(\"클릭\");\r\n        // console.log(bb);\r\n        // console.log(\"fflist\");\r\n        // console.log(fflist);\r\n\r\n        setallList(list);\r\n     \r\n        finalprint(list,0,true);\r\n\r\n      \r\n        // 그리고 적용 setnownum이 적용된 후 setallList가 적용됨\r\n        // setworld(false,()=>setnownum(0,()=>setallList(list)));\r\n    \r\n        \r\n        // console.log(\"리스트출력한다!\");\r\n        // console.log(list);\r\n        \r\n\r\n    };\r\n\r\n\r\n\r\n    // 현재 시간표에서 삭제 버튼 클릭시 함수 호출 \r\n  \r\n      \r\n\r\n    const {type1,type2,type3}=useSelector(({write})=>({\r\n\r\n       type1:write.type1,\r\n       type2:write.type2,\r\n       type3:write.type3,\r\n    }\r\n    )); \r\n\r\n    const Maintable={\r\n        type1,type2,type3\r\n    };\r\n    \r\n\r\n\r\n// useEffect(()=>makingDrawList(),[TdrawList]);\r\n// useEffect(()=>finalprint(),[allList]);\r\n\r\n    // 배열로 시간표 리스트만 넘기면됨 \r\n\r\n    useEffect(()=>makingDrawList([],-1),[TdrawList]);\r\n    // 얘는 TdrawList를 살펴보고 과목당 시간을 적절히 출력할 수 있게 숫자로 바꿔줌\r\n    const makingDrawList=(something,index)=>{\r\n\r\n        if(something.length===0)\r\n            something=TdrawList;\r\n\r\n        if(index!==-1)\r\n            {\r\n                setnownum(index);\r\n\r\n            }\r\n\r\n            \r\n        let makingTable=[];\r\n\r\n        for(let i=0;i<something.length;i++){  // 한 과목씩 살펴봄\r\n\r\n            for(let j=0;j<something[i].classtime.keyword.length;j++){  // 한 과목의 요일수\r\n                \r\n                let day;\r\n\r\n                switch(something[i].classtime.keyword[j]){\r\n                    case 't1': day=5; break;\r\n                    case 't2': day=24; break;\r\n                    case 't3': day=43; break;\r\n                    case 't4': day=62; break;\r\n                    case 't5': day=81; break;\r\n                    default: break;\r\n\r\n                }\r\n\r\n              \r\n\r\n              let dayarr=  something[i].classtime[something[i].classtime.keyword[j]]; // 요일 배열\r\n                \r\n              let timeleng=dayarr.length * 3.5;\r\n              let time=9+((dayarr[0]-2)*3.5);\r\n\r\n                makingTable.push({x:day,y:time,ycolor:timeleng,color:\"#CEF6F5\",text:something[i].classname});\r\n            \r\n            }\r\n\r\n\r\n        }\r\n        \r\n        setmakingdrawList(makingTable);\r\n\r\n\r\n    };\r\n\r\n    \r\n\r\n    const Calculate=()=>{\r\n\r\n        const fflist=mainTree(Maintable,[],[]);\r\n        setnownum(0);\r\n        setclick([]);\r\n        \r\n        setmaindata([...fflist[0]]);\r\n\r\n        setallList(fflist);\r\n        finalprint(fflist,0,false);\r\n\r\n    \r\n\r\n    };\r\n\r\n\r\n    const finalprint=(list,num,c)=>{\r\n\r\n        let kkk=[];\r\n        if(list.length!==0){\r\n\r\n            \r\n        for(let i=0;i<list[num].length;i++){\r\n\r\n            let tt=list[num][i];\r\n\r\n            kkk.push(tt);\r\n\r\n        }\r\n\r\n        if(c===false){\r\n            setmaindata([...list[num]]);\r\n        }\r\n        \r\n\r\n        setTdrawList(kkk);\r\n\r\n\r\n    }\r\n\r\n    };\r\n    \r\n\r\n    const next=()=>{\r\n        let num=nownum;\r\n        if(allList.length -1 === nownum  ){\r\n\r\n            // setnownum(0);\r\n\r\n           \r\n        }\r\n\r\n        else {\r\n            num=nownum+1;\r\n            setnownum(nownum+1);\r\n            \r\n\r\n        }\r\n\r\n        if(click.length===0)\r\n            finalprint(allList,num,false);\r\n        else\r\n            finalprint(allList,num,true);\r\n\r\n    };\r\n\r\n    const previous=()=>{\r\n\r\n        if(nownum>0){\r\n                let num=nownum-1;\r\n            setnownum(nownum-1);\r\n\r\n            if(click.length===0)\r\n            finalprint(allList,num,false);\r\n            else\r\n            finalprint(allList,num,true);\r\n\r\n        }\r\n\r\n        \r\n\r\n    };\r\n\r\n     \r\n\r\n\r\n    return (\r\n        <Graph \r\n            TdrawList={TdrawList}\r\n            makingdrawList={makingdrawList}\r\n            Calculate={Calculate}\r\n            next={next}\r\n            previous={previous}\r\n            NextRoot={NextRoot}\r\n            click={click}\r\n            maindata={maindata}\r\n            allList={allList}\r\n            makingDrawList={makingDrawList}\r\n            nownum={nownum}\r\n            >\r\n\r\n            </Graph>\r\n    );\r\n\r\n\r\n};\r\n\r\n\r\nexport default GraphContainer;"]},"metadata":{},"sourceType":"module"}