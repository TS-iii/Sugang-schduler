{"ast":null,"code":"export class Node {\n  constructor(data) {\n    this.data = data;\n    this.children = [];\n    this.adault = null;\n    this.score = 0;\n    this.maxrootlist = [];\n    this.deep = 0;\n  }\n\n  insert(data) {\n    const node = new Node(data);\n    node.adault = this;\n    node.score = node.adault.score + data.classscore; // 누적 학점\n\n    this.children.push(node);\n    node.num = this.children.length - 1;\n  }\n\n}\nexport class classTree {\n  constructor() {\n    this.deep = 0;\n    this.classlist = [];\n    this.children = [];\n    this.childinfo = {\n      max: 0,\n      maxleng: 0\n    };\n  }\n\n  insert(deep, classlist, type) {\n    const tree = new classTree();\n    tree.type = type;\n    tree.deep = deep;\n    tree.classlist = classlist;\n    tree.adault = this;\n    this.children.push(tree);\n    tree.num = this.children.length - 1;\n  }\n\n  insertinfo(max, maxleng) {\n    this.childinfo.max = max;\n    this.childinfo.maxleng = maxleng;\n  }\n\n}\nconst typer = [\"type1\", \"type2\", \"type3\"];\nlet fflist = []; //둘의 시간이 겹치는지 확인\n//안겹치면 true 반환\n// 시간표를 넘겨줘야함\n\nexport const lookschedule = function (a, b) {\n  if (a.t1.length && b.t1.length) {\n    for (let i = 0; i < a.t1.length; i++) {\n      if (b.t1.indexOf(a.t1[i]) !== -1) return false;\n    }\n  }\n\n  if (a.t2.length && b.t2.length) {\n    for (let i = 0; i < a.t2.length; i++) {\n      if (b.t2.indexOf(a.t2[i]) !== -1) return false;\n    }\n  }\n\n  if (a.t3.length && b.t3.length) {\n    for (let i = 0; i < a.t3.length; i++) {\n      if (b.t3.indexOf(a.t3[i]) !== -1) return false;\n    }\n  }\n\n  if (a.t4.length && b.t4.length) {\n    for (let i = 0; i < a.t4.length; i++) {\n      if (b.t4.indexOf(a.t4[i]) !== -1) return false;\n    }\n  }\n\n  if (a.t5.length && b.t5.length) {\n    for (let i = 0; i < a.t5.length; i++) {\n      if (b.t5.indexOf(a.t5[i]) !== -1) return false;\n    }\n  }\n\n  return true;\n}; //banlist는 data 배열이어야함\n\nexport const mainTree = (table, banlist, specialbanlist) => {\n  fflist = [];\n  const classroot = new classTree();\n  composeTree(classroot, table, banlist, 0, specialbanlist);\n  comparemain(classroot);\n  analyze(classroot);\n  fflist = uniq(fflist);\n  return fflist;\n}; //부분집합이 되는거 삭제\n\nexport const uniq = function (list) {\n  for (let i = 0; i < list.length - 1; i++) {\n    if (list[i].id === -1) continue;\n\n    for (let j = i + 1; j < list.length; j++) {\n      if (list[j].id === -1) continue;\n      let tf = uniqfunc(list[i], list[j]);\n\n      if (tf === 0 || tf === 1) {\n        list[j].id = -1;\n      } else if (tf === -1) {\n        //i를 버려야함\n        list[i].id = -1;\n        break;\n      } else if (tf === 2) {\n        // i랑 j 둘다 살림.\n        continue;\n      }\n    }\n  }\n\n  let bb = [];\n\n  for (let i = 0; i < list.length; i++) {\n    if (list[i].id !== -1) bb.push(list[i]);\n  }\n\n  return bb;\n};\nexport const uniqfunc = function (a, b) {\n  let aa = a.length;\n  let bb = b.length;\n\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i].id === b[j].id) {\n        aa--;\n        bb--;\n        break;\n      }\n    }\n  }\n\n  if (aa === 0 && bb === 0) return 0;else if (aa > 0 && bb === 0) return 1;else if (aa === 0 && bb > 0) return -1;else if (aa > 0 && bb > 0) return 2;\n};\nexport const analyze = function (root) {\n  if (root.children.length !== 0) {\n    for (let i = 0; i < root.children.length; i++) {\n      let list = [];\n      analyzetree(root.children[i], list);\n    }\n  }\n};\nexport const analyzetree = function (root, list) {\n  let alist = list.concat(root.classlist);\n\n  if (root.children.length === 0) {\n    fflist.push(alist);\n    return;\n  } else {\n    for (let i = 0; i < root.children.length; i++) {\n      analyzetree(root.children[i], alist);\n    }\n  }\n};\nexport const comparemain = function (root) {\n  if (root.children.length === 0) return;\n\n  for (let i = 0; i < root.children.length - 1; i++) {\n    for (let j = i + 1; j < root.children.length; j++) {\n      if (compare(root.children[i], root.children[j]) === -1) {\n        let temp = root.children[j];\n        root.children[j] = root.children[i];\n        root.children[i] = temp;\n      }\n    }\n  }\n\n  for (let i = 0; i < root.children.length; i++) {\n    comparemain(root.children[i]);\n  }\n};\nexport const compare = function (a, b) {\n  if (a.deep > b.deep) return 1;\n  if (a.deep < b.deep) return -1;\n\n  if (a.deep === b.deep) {\n    if (a.children.length === 0 && b.children.length === 0) return 0;else if (a.children.length === 0 && b.children.length !== 0) return -1;else if (a.children.length !== 0 && b.children.length === 0) return 1;else {\n      if (a.childinfo.max > b.childinfo.max) return 1;\n      if (a.childinfo.max < b.childinfo.max) return -1;\n      if (a.childinfo.maxleng > b.childinfo.maxleng) return 1;else if (a.childinfo.maxleng < b.childinfo.maxleng) return -1;else return 0;\n    }\n  }\n};\nexport const composeTree = function (classroot, table, banlist, index, specialbanlist) {\n  const root = new Node();\n  root.memberlist = [];\n  root.finalTable = [];\n\n  if (exbanlist(typer[index], table, banlist, root, specialbanlist)) {\n    classroot.insertinfo(root.deep, root.maxrootlist.length);\n\n    for (let i = 0; i < root.memberlist.length; i++) {\n      let temp = root.memberlist[i];\n      let tempdata = [];\n\n      for (let j = 0; j < root.memberlist[i].deep; j++) {\n        tempdata.push(temp.data);\n        temp = temp.adault;\n      }\n\n      classroot.insert(root.memberlist[i].deep, tempdata, typer[index]);\n\n      if (index < typer.length - 1) {\n        let addbanlist = banlist.concat(tempdata);\n        composeTree(classroot.children[i], table, addbanlist, index + 1, specialbanlist);\n      } else return;\n    }\n  } else {\n    if (index < typer.length - 1) composeTree(classroot, table, banlist, index + 1, specialbanlist);else return;\n  }\n}; // type과 table에서 banlist를 주면 root에 알아서 목록을 집어넣어준다 \n\nexport const exbanlist = (type, table, banlist, root, specialbanlist) => {\n  for (let i = 0; i < table[type].length; i++) {\n    if (banlist.length === 0) {\n      let t = 0;\n\n      for (let j = 0; j < specialbanlist.length; j++) {\n        if (table[type][i].id !== specialbanlist[j].id) t++;\n      }\n\n      if (t === specialbanlist.length) root.insert(table[type][i]);\n    } else {\n      let t = 0;\n\n      for (let j = 0; j < banlist.length; j++) {\n        if (banlist[j].classname !== table[type][i].classname) {\n          if (lookschedule(banlist[j].classtime, table[type][i].classtime)) {\n            t++;\n          }\n        }\n      }\n\n      if (t === banlist.length) {\n        t = 0;\n\n        for (let j = 0; j < specialbanlist.length; j++) {\n          if (table[type][i].id !== specialbanlist[j].id) t++;\n        }\n\n        if (t === specialbanlist.length) root.insert(table[type][i]);\n      }\n    }\n  }\n\n  for (let i = 0; i < root.children.length; i++) {\n    root.memberlist.push(root.children[i]);\n    search(root.children[i], 1, root);\n  }\n\n  for (let i = 0; i < root.finalTable.length; i++) {\n    let n = root.finalTable[i];\n\n    if (n.deep === root.deep) {\n      root.maxrootlist.push(n);\n    }\n  }\n\n  if (root.children.length !== 0) return true;else return false;\n};\nexport const search = function (n, k, root) {\n  let num = 0;\n  n.deep = k;\n\n  for (let i = n.num + 1; i < n.adault.children.length; i++) {\n    if (n.data.classname !== n.adault.children[i].data.classname) {\n      if (lookschedule(n.data.classtime, n.adault.children[i].data.classtime)) {\n        n.insert(n.adault.children[i].data);\n        num++;\n      }\n    }\n  }\n\n  ;\n\n  if (num === 0) //지금 이 노드가 leaf라는 소리\n    {\n      if (root.deep < k) root.deep = k; // 리프는 root->자기로 향하는 노드들의 리스트를 따로 저장함.\n\n      n.list = [];\n      let tempn = n;\n\n      for (let j = 0; j < n.deep; j++) {\n        n.list.push(tempn);\n        tempn = tempn.adault;\n      }\n\n      root.finalTable.push(n);\n      return;\n    } else {\n    for (let i = 0; i < num; i++) {\n      root.memberlist.push(n.children[i]);\n      search(n.children[i], k + 1, root);\n    }\n  }\n};\nexport default Node;","map":{"version":3,"sources":["C:/Users/user/Desktop/ReactProject/sugang-scheduler/sugang-frontend/src/lib/tree/tree.js"],"names":["Node","constructor","data","children","adault","score","maxrootlist","deep","insert","node","classscore","push","num","length","classTree","classlist","childinfo","max","maxleng","type","tree","insertinfo","typer","fflist","lookschedule","a","b","t1","i","indexOf","t2","t3","t4","t5","mainTree","table","banlist","specialbanlist","classroot","composeTree","comparemain","analyze","uniq","list","id","j","tf","uniqfunc","bb","aa","root","analyzetree","alist","concat","compare","temp","index","memberlist","finalTable","exbanlist","tempdata","addbanlist","t","classname","classtime","search","n","k","tempn"],"mappings":"AAEA,OAAO,MAAMA,IAAN,CAAW;AAEdC,EAAAA,WAAW,CAACC,IAAD,EAAM;AAEb,SAAKA,IAAL,GAAUA,IAAV;AACA,SAAKC,QAAL,GAAc,EAAd;AACA,SAAKC,MAAL,GAAY,IAAZ;AACA,SAAKC,KAAL,GAAW,CAAX;AACA,SAAKC,WAAL,GAAiB,EAAjB;AACA,SAAKC,IAAL,GAAU,CAAV;AAGH;;AAGFC,EAAAA,MAAM,CAACN,IAAD,EAAM;AAEX,UAAMO,IAAI,GAAC,IAAIT,IAAJ,CAASE,IAAT,CAAX;AACAO,IAAAA,IAAI,CAACL,MAAL,GAAY,IAAZ;AAEAK,IAAAA,IAAI,CAACJ,KAAL,GAAWI,IAAI,CAACL,MAAL,CAAYC,KAAZ,GAAkBH,IAAI,CAACQ,UAAlC,CALW,CAKoC;;AAE/C,SAAKP,QAAL,CAAcQ,IAAd,CAAmBF,IAAnB;AACAA,IAAAA,IAAI,CAACG,GAAL,GAAS,KAAKT,QAAL,CAAcU,MAAd,GAAqB,CAA9B;AAIA;;AA3Bc;AA+BlB,OAAO,MAAMC,SAAN,CAAe;AAElBb,EAAAA,WAAW,GAAE;AAGT,SAAKM,IAAL,GAAU,CAAV;AACA,SAAKQ,SAAL,GAAe,EAAf;AACA,SAAKZ,QAAL,GAAc,EAAd;AACA,SAAKa,SAAL,GAAe;AAACC,MAAAA,GAAG,EAAC,CAAL;AAAQC,MAAAA,OAAO,EAAC;AAAhB,KAAf;AACH;;AAGDV,EAAAA,MAAM,CAACD,IAAD,EAAMQ,SAAN,EAAgBI,IAAhB,EAAqB;AAEvB,UAAMC,IAAI,GAAC,IAAIN,SAAJ,EAAX;AAEAM,IAAAA,IAAI,CAACD,IAAL,GAAUA,IAAV;AACAC,IAAAA,IAAI,CAACb,IAAL,GAAUA,IAAV;AACAa,IAAAA,IAAI,CAACL,SAAL,GAAeA,SAAf;AACAK,IAAAA,IAAI,CAAChB,MAAL,GAAY,IAAZ;AACA,SAAKD,QAAL,CAAcQ,IAAd,CAAmBS,IAAnB;AACAA,IAAAA,IAAI,CAACR,GAAL,GAAS,KAAKT,QAAL,CAAcU,MAAd,GAAqB,CAA9B;AAGH;;AAEDQ,EAAAA,UAAU,CAACJ,GAAD,EAAKC,OAAL,EAAa;AAGnB,SAAKF,SAAL,CAAeC,GAAf,GAAmBA,GAAnB;AACA,SAAKD,SAAL,CAAeE,OAAf,GAAuBA,OAAvB;AAGH;;AAjCiB;AAwCtB,MAAMI,KAAK,GAAC,CAAC,OAAD,EAAS,OAAT,EAAiB,OAAjB,CAAZ;AACA,IAAIC,MAAM,GAAC,EAAX,C,CAEA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAE,UAASC,CAAT,EAAWC,CAAX,EAAa;AAEpC,MAAGD,CAAC,CAACE,EAAF,CAAKd,MAAL,IAAea,CAAC,CAACC,EAAF,CAAKd,MAAvB,EACI;AACQ,SAAI,IAAIe,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACH,CAAC,CAACE,EAAF,CAAKd,MAAnB,EAA0Be,CAAC,EAA3B,EAA8B;AAE1B,UAAGF,CAAC,CAACC,EAAF,CAAKE,OAAL,CAAaJ,CAAC,CAACE,EAAF,CAAKC,CAAL,CAAb,MAAwB,CAAC,CAA5B,EACI,OAAO,KAAP;AAEP;AAER;;AAEL,MAAGH,CAAC,CAACK,EAAF,CAAKjB,MAAL,IAAea,CAAC,CAACI,EAAF,CAAKjB,MAAvB,EACA;AACQ,SAAI,IAAIe,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACH,CAAC,CAACK,EAAF,CAAKjB,MAAnB,EAA0Be,CAAC,EAA3B,EAA8B;AAE1B,UAAGF,CAAC,CAACI,EAAF,CAAKD,OAAL,CAAaJ,CAAC,CAACK,EAAF,CAAKF,CAAL,CAAb,MAAwB,CAAC,CAA5B,EACI,OAAO,KAAP;AAEP;AACR;;AAID,MAAGH,CAAC,CAACM,EAAF,CAAKlB,MAAL,IAAea,CAAC,CAACK,EAAF,CAAKlB,MAAvB,EACA;AACQ,SAAI,IAAIe,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACH,CAAC,CAACM,EAAF,CAAKlB,MAAnB,EAA0Be,CAAC,EAA3B,EAA8B;AAE1B,UAAGF,CAAC,CAACK,EAAF,CAAKF,OAAL,CAAaJ,CAAC,CAACM,EAAF,CAAKH,CAAL,CAAb,MAAwB,CAAC,CAA5B,EACI,OAAO,KAAP;AAEP;AACR;;AAED,MAAGH,CAAC,CAACO,EAAF,CAAKnB,MAAL,IAAea,CAAC,CAACM,EAAF,CAAKnB,MAAvB,EACA;AACQ,SAAI,IAAIe,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACH,CAAC,CAACO,EAAF,CAAKnB,MAAnB,EAA0Be,CAAC,EAA3B,EAA8B;AAE1B,UAAGF,CAAC,CAACM,EAAF,CAAKH,OAAL,CAAaJ,CAAC,CAACO,EAAF,CAAKJ,CAAL,CAAb,MAAwB,CAAC,CAA5B,EACI,OAAO,KAAP;AAEP;AAER;;AAED,MAAGH,CAAC,CAACQ,EAAF,CAAKpB,MAAL,IAAea,CAAC,CAACO,EAAF,CAAKpB,MAAvB,EACA;AACQ,SAAI,IAAIe,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACH,CAAC,CAACQ,EAAF,CAAKpB,MAAnB,EAA0Be,CAAC,EAA3B,EAA8B;AAE1B,UAAGF,CAAC,CAACO,EAAF,CAAKJ,OAAL,CAAaJ,CAAC,CAACQ,EAAF,CAAKL,CAAL,CAAb,MAAwB,CAAC,CAA5B,EACI,OAAO,KAAP;AAEP;AAER;;AAGD,SAAO,IAAP;AAIH,CA9DM,C,CAiEP;;AACA,OAAO,MAAMM,QAAQ,GAAC,CAACC,KAAD,EAAOC,OAAP,EAAeC,cAAf,KAAgC;AAElDd,EAAAA,MAAM,GAAC,EAAP;AAEA,QAAMe,SAAS,GAAC,IAAIxB,SAAJ,EAAhB;AAGAyB,EAAAA,WAAW,CAACD,SAAD,EAAWH,KAAX,EAAiBC,OAAjB,EAAyB,CAAzB,EAA2BC,cAA3B,CAAX;AAGAG,EAAAA,WAAW,CAACF,SAAD,CAAX;AAGAG,EAAAA,OAAO,CAACH,SAAD,CAAP;AAGAf,EAAAA,MAAM,GAACmB,IAAI,CAACnB,MAAD,CAAX;AAIA,SAAOA,MAAP;AAEH,CAtBM,C,CAyBP;;AACA,OAAO,MAAMmB,IAAI,GAAC,UAASC,IAAT,EAAc;AAIhC,OAAI,IAAIf,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACe,IAAI,CAAC9B,MAAL,GAAY,CAA1B,EAA4Be,CAAC,EAA7B,EAAgC;AAE5B,QAAGe,IAAI,CAACf,CAAD,CAAJ,CAAQgB,EAAR,KAAa,CAAC,CAAjB,EACI;;AAGJ,SAAI,IAAIC,CAAC,GAACjB,CAAC,GAAC,CAAZ,EAAciB,CAAC,GAACF,IAAI,CAAC9B,MAArB,EAA4BgC,CAAC,EAA7B,EAAgC;AAE5B,UAAGF,IAAI,CAACE,CAAD,CAAJ,CAAQD,EAAR,KAAa,CAAC,CAAjB,EACI;AAEJ,UAAIE,EAAE,GAACC,QAAQ,CAACJ,IAAI,CAACf,CAAD,CAAL,EAASe,IAAI,CAACE,CAAD,CAAb,CAAf;;AAEA,UAAGC,EAAE,KAAG,CAAL,IAAUA,EAAE,KAAG,CAAlB,EACI;AACIH,QAAAA,IAAI,CAACE,CAAD,CAAJ,CAAQD,EAAR,GAAW,CAAC,CAAZ;AAEH,OAJL,MAMK,IAAGE,EAAE,KAAG,CAAC,CAAT,EACD;AAAI;AACAH,QAAAA,IAAI,CAACf,CAAD,CAAJ,CAAQgB,EAAR,GAAW,CAAC,CAAZ;AAEA;AACH,OALA,MAMA,IAAGE,EAAE,KAAG,CAAR,EACD;AAAI;AAEA;AAEH;AAGR;AAEJ;;AAGD,MAAIE,EAAE,GAAC,EAAP;;AACA,OAAI,IAAIpB,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACe,IAAI,CAAC9B,MAAnB,EAA0Be,CAAC,EAA3B,EAA8B;AAE1B,QAAGe,IAAI,CAACf,CAAD,CAAJ,CAAQgB,EAAR,KAAa,CAAC,CAAjB,EACII,EAAE,CAACrC,IAAH,CAAQgC,IAAI,CAACf,CAAD,CAAZ;AAGP;;AAEG,SAAOoB,EAAP;AAIH,CAvDM;AAyDP,OAAO,MAAMD,QAAQ,GAAC,UAAStB,CAAT,EAAWC,CAAX,EAAa;AAE/B,MAAIuB,EAAE,GAACxB,CAAC,CAACZ,MAAT;AACA,MAAImC,EAAE,GAACtB,CAAC,CAACb,MAAT;;AAEA,OAAI,IAAIe,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACH,CAAC,CAACZ,MAAhB,EAAuBe,CAAC,EAAxB,EAA2B;AAEvB,SAAI,IAAIiB,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACnB,CAAC,CAACb,MAAhB,EAAuBgC,CAAC,EAAxB,EAA2B;AAEvB,UAAGpB,CAAC,CAACG,CAAD,CAAD,CAAKgB,EAAL,KAAUlB,CAAC,CAACmB,CAAD,CAAD,CAAKD,EAAlB,EACI;AAAIK,QAAAA,EAAE;AACFD,QAAAA,EAAE;AACF;AACH;AAGR;AAEJ;;AAED,MAAGC,EAAE,KAAG,CAAL,IAAUD,EAAE,KAAG,CAAlB,EACI,OAAO,CAAP,CADJ,KAEK,IAAGC,EAAE,GAAC,CAAH,IAAQD,EAAE,KAAG,CAAhB,EACD,OAAO,CAAP,CADC,KAEA,IAAGC,EAAE,KAAG,CAAL,IAAUD,EAAE,GAAC,CAAhB,EACD,OAAO,CAAC,CAAR,CADC,KAEA,IAAGC,EAAE,GAAC,CAAH,IAAQD,EAAE,GAAC,CAAd,EACD,OAAO,CAAP;AAGP,CA9BM;AAiCP,OAAO,MAAMP,OAAO,GAAC,UAASS,IAAT,EAAc;AAG/B,MAAGA,IAAI,CAAC/C,QAAL,CAAcU,MAAd,KAAuB,CAA1B,EAA4B;AAGxB,SAAI,IAAIe,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACsB,IAAI,CAAC/C,QAAL,CAAcU,MAA5B,EAAmCe,CAAC,EAApC,EAAuC;AAEnC,UAAIe,IAAI,GAAC,EAAT;AACAQ,MAAAA,WAAW,CAACD,IAAI,CAAC/C,QAAL,CAAcyB,CAAd,CAAD,EAAkBe,IAAlB,CAAX;AAEH;AAEJ;AAIJ,CAjBM;AAoBP,OAAO,MAAMQ,WAAW,GAAC,UAASD,IAAT,EAAcP,IAAd,EAAmB;AAErC,MAAIS,KAAK,GAACT,IAAI,CAACU,MAAL,CAAYH,IAAI,CAACnC,SAAjB,CAAV;;AAEF,MAAGmC,IAAI,CAAC/C,QAAL,CAAcU,MAAd,KAAuB,CAA1B,EACG;AACIU,IAAAA,MAAM,CAACZ,IAAP,CAAYyC,KAAZ;AACA;AACH,GAJJ,MAMG;AAEA,SAAI,IAAIxB,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACsB,IAAI,CAAC/C,QAAL,CAAcU,MAA5B,EAAmCe,CAAC,EAApC,EAAuC;AAEnCuB,MAAAA,WAAW,CAACD,IAAI,CAAC/C,QAAL,CAAcyB,CAAd,CAAD,EAAkBwB,KAAlB,CAAX;AAEH;AAGJ;AAKJ,CAxBM;AA0BP,OAAO,MAAMZ,WAAW,GAAC,UAASU,IAAT,EAAc;AAEnC,MAAGA,IAAI,CAAC/C,QAAL,CAAcU,MAAd,KAAuB,CAA1B,EACQ;;AAGA,OAAI,IAAIe,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACsB,IAAI,CAAC/C,QAAL,CAAcU,MAAd,GAAqB,CAAnC,EAAqCe,CAAC,EAAtC,EAAyC;AAErC,SAAI,IAAIiB,CAAC,GAACjB,CAAC,GAAC,CAAZ,EAAciB,CAAC,GAACK,IAAI,CAAC/C,QAAL,CAAcU,MAA9B,EAAqCgC,CAAC,EAAtC,EACQ;AAEI,UAAGS,OAAO,CAACJ,IAAI,CAAC/C,QAAL,CAAcyB,CAAd,CAAD,EAAkBsB,IAAI,CAAC/C,QAAL,CAAc0C,CAAd,CAAlB,CAAP,KAA6C,CAAC,CAAjD,EACI;AACQ,YAAIU,IAAI,GAACL,IAAI,CAAC/C,QAAL,CAAc0C,CAAd,CAAT;AACAK,QAAAA,IAAI,CAAC/C,QAAL,CAAc0C,CAAd,IAAiBK,IAAI,CAAC/C,QAAL,CAAcyB,CAAd,CAAjB;AACAsB,QAAAA,IAAI,CAAC/C,QAAL,CAAcyB,CAAd,IAAiB2B,IAAjB;AAEP;AAIR;AAGZ;;AAGD,OAAI,IAAI3B,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACsB,IAAI,CAAC/C,QAAL,CAAcU,MAA5B,EAAmCe,CAAC,EAApC,EAAuC;AAEnCY,IAAAA,WAAW,CAACU,IAAI,CAAC/C,QAAL,CAAcyB,CAAd,CAAD,CAAX;AAGH;AAGZ,CAnCM;AAsCP,OAAO,MAAM0B,OAAO,GAAC,UAAS7B,CAAT,EAAWC,CAAX,EAAa;AAE9B,MAAGD,CAAC,CAAClB,IAAF,GAAOmB,CAAC,CAACnB,IAAZ,EACI,OAAO,CAAP;AACJ,MAAGkB,CAAC,CAAClB,IAAF,GAAOmB,CAAC,CAACnB,IAAZ,EACI,OAAO,CAAC,CAAR;;AAEJ,MAAGkB,CAAC,CAAClB,IAAF,KAASmB,CAAC,CAACnB,IAAd,EAAmB;AAGf,QAAGkB,CAAC,CAACtB,QAAF,CAAWU,MAAX,KAAoB,CAApB,IAAyBa,CAAC,CAACvB,QAAF,CAAWU,MAAX,KAAoB,CAAhD,EACI,OAAO,CAAP,CADJ,KAEK,IAAGY,CAAC,CAACtB,QAAF,CAAWU,MAAX,KAAoB,CAApB,IAAyBa,CAAC,CAACvB,QAAF,CAAWU,MAAX,KAAoB,CAAhD,EACD,OAAO,CAAC,CAAR,CADC,KAEA,IAAGY,CAAC,CAACtB,QAAF,CAAWU,MAAX,KAAoB,CAApB,IAAyBa,CAAC,CAACvB,QAAF,CAAWU,MAAX,KAAoB,CAAhD,EACD,OAAO,CAAP,CADC,KAGD;AAEI,UAAGY,CAAC,CAACT,SAAF,CAAYC,GAAZ,GAAgBS,CAAC,CAACV,SAAF,CAAYC,GAA/B,EACI,OAAO,CAAP;AACJ,UAAGQ,CAAC,CAACT,SAAF,CAAYC,GAAZ,GAAgBS,CAAC,CAACV,SAAF,CAAYC,GAA/B,EACI,OAAO,CAAC,CAAR;AAEJ,UAAGQ,CAAC,CAACT,SAAF,CAAYE,OAAZ,GAAoBQ,CAAC,CAACV,SAAF,CAAYE,OAAnC,EACI,OAAO,CAAP,CADJ,KAEK,IAAGO,CAAC,CAACT,SAAF,CAAYE,OAAZ,GAAoBQ,CAAC,CAACV,SAAF,CAAYE,OAAnC,EACD,OAAO,CAAC,CAAR,CADC,KAGD,OAAO,CAAP;AAGP;AAIR;AAIJ,CAxCM;AA0CP,OAAO,MAAMqB,WAAW,GAAC,UAASD,SAAT,EAAmBH,KAAnB,EAAyBC,OAAzB,EAAiCoB,KAAjC,EAAuCnB,cAAvC,EAAsD;AAE3E,QAAMa,IAAI,GAAE,IAAIlD,IAAJ,EAAZ;AAEAkD,EAAAA,IAAI,CAACO,UAAL,GAAgB,EAAhB;AACAP,EAAAA,IAAI,CAACQ,UAAL,GAAgB,EAAhB;;AAMI,MAAGC,SAAS,CAACrC,KAAK,CAACkC,KAAD,CAAN,EAAcrB,KAAd,EAAoBC,OAApB,EAA4Bc,IAA5B,EAAiCb,cAAjC,CAAZ,EAA6D;AAGxDC,IAAAA,SAAS,CAACjB,UAAV,CAAqB6B,IAAI,CAAC3C,IAA1B,EAA+B2C,IAAI,CAAC5C,WAAL,CAAiBO,MAAhD;;AAEO,SAAI,IAAIe,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACsB,IAAI,CAACO,UAAL,CAAgB5C,MAA9B,EAAqCe,CAAC,EAAtC,EAAyC;AACrC,UAAI2B,IAAI,GAACL,IAAI,CAACO,UAAL,CAAgB7B,CAAhB,CAAT;AACA,UAAIgC,QAAQ,GAAC,EAAb;;AAIA,WAAI,IAAIf,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACK,IAAI,CAACO,UAAL,CAAgB7B,CAAhB,EAAmBrB,IAAjC,EAAsCsC,CAAC,EAAvC,EAA0C;AAElCe,QAAAA,QAAQ,CAACjD,IAAT,CAAc4C,IAAI,CAACrD,IAAnB;AAEAqD,QAAAA,IAAI,GAACA,IAAI,CAACnD,MAAV;AAGP;;AAGDkC,MAAAA,SAAS,CAAC9B,MAAV,CAAiB0C,IAAI,CAACO,UAAL,CAAgB7B,CAAhB,EAAmBrB,IAApC,EAAyCqD,QAAzC,EAAkDtC,KAAK,CAACkC,KAAD,CAAvD;;AAEA,UAAGA,KAAK,GAAClC,KAAK,CAACT,MAAN,GAAa,CAAtB,EAAwB;AAExB,YAAIgD,UAAU,GAACzB,OAAO,CAACiB,MAAR,CAAeO,QAAf,CAAf;AACArB,QAAAA,WAAW,CAACD,SAAS,CAACnC,QAAV,CAAmByB,CAAnB,CAAD,EAAuBO,KAAvB,EAA6B0B,UAA7B,EAAwCL,KAAK,GAAC,CAA9C,EAAgDnB,cAAhD,CAAX;AAEC,OALD,MAQI;AAEP;AAKZ,GAtCD,MAwCI;AAEA,QAAGmB,KAAK,GAAClC,KAAK,CAACT,MAAN,GAAa,CAAtB,EACI0B,WAAW,CAACD,SAAD,EAAWH,KAAX,EAAiBC,OAAjB,EAAyBoB,KAAK,GAAC,CAA/B,EAAiCnB,cAAjC,CAAX,CADJ,KAII;AAGP;AAMJ,CAlEE,C,CAsEP;;AACA,OAAO,MAAMsB,SAAS,GAAC,CAACxC,IAAD,EAAMgB,KAAN,EAAYC,OAAZ,EAAoBc,IAApB,EAAyBb,cAAzB,KAA0C;AAG7D,OAAI,IAAIT,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACO,KAAK,CAAChB,IAAD,CAAL,CAAYN,MAA1B,EAAiCe,CAAC,EAAlC,EAAqC;AAGjC,QAAGQ,OAAO,CAACvB,MAAR,KAAiB,CAApB,EAAsB;AAElB,UAAIiD,CAAC,GAAC,CAAN;;AACA,WAAI,IAAIjB,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACR,cAAc,CAACxB,MAA7B,EAAoCgC,CAAC,EAArC,EAAwC;AAEpC,YAAGV,KAAK,CAAChB,IAAD,CAAL,CAAYS,CAAZ,EAAegB,EAAf,KAAoBP,cAAc,CAACQ,CAAD,CAAd,CAAkBD,EAAzC,EACIkB,CAAC;AAGR;;AAED,UAAGA,CAAC,KAAGzB,cAAc,CAACxB,MAAtB,EACKqC,IAAI,CAAC1C,MAAL,CAAY2B,KAAK,CAAChB,IAAD,CAAL,CAAYS,CAAZ,CAAZ;AACR,KAbD,MAcC;AACD,UAAIkC,CAAC,GAAC,CAAN;;AAEA,WAAK,IAAIjB,CAAC,GAAC,CAAX,EAAaA,CAAC,GAACT,OAAO,CAACvB,MAAvB,EAA8BgC,CAAC,EAA/B,EAAkC;AAE9B,YAAGT,OAAO,CAACS,CAAD,CAAP,CAAWkB,SAAX,KAAuB5B,KAAK,CAAChB,IAAD,CAAL,CAAYS,CAAZ,EAAemC,SAAzC,EACA;AACI,cAAGvC,YAAY,CAACY,OAAO,CAACS,CAAD,CAAP,CAAWmB,SAAZ,EAAsB7B,KAAK,CAAChB,IAAD,CAAL,CAAYS,CAAZ,EAAeoC,SAArC,CAAf,EACG;AACKF,YAAAA,CAAC;AAEL;AAGP;AAGJ;;AAGD,UAAGA,CAAC,KAAG1B,OAAO,CAACvB,MAAf,EACI;AACIiD,QAAAA,CAAC,GAAC,CAAF;;AACA,aAAI,IAAIjB,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACR,cAAc,CAACxB,MAA7B,EAAoCgC,CAAC,EAArC,EAAwC;AAEpC,cAAGV,KAAK,CAAChB,IAAD,CAAL,CAAYS,CAAZ,EAAegB,EAAf,KAAoBP,cAAc,CAACQ,CAAD,CAAd,CAAkBD,EAAzC,EACIkB,CAAC;AAGR;;AAED,YAAGA,CAAC,KAAGzB,cAAc,CAACxB,MAAtB,EACAqC,IAAI,CAAC1C,MAAL,CAAY2B,KAAK,CAAChB,IAAD,CAAL,CAAYS,CAAZ,CAAZ;AAGH;AAGR;AAGA;;AAGD,OAAI,IAAIA,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACsB,IAAI,CAAC/C,QAAL,CAAcU,MAA5B,EAAmCe,CAAC,EAApC,EAAuC;AAEnCsB,IAAAA,IAAI,CAACO,UAAL,CAAgB9C,IAAhB,CAAqBuC,IAAI,CAAC/C,QAAL,CAAcyB,CAAd,CAArB;AACAqC,IAAAA,MAAM,CAACf,IAAI,CAAC/C,QAAL,CAAcyB,CAAd,CAAD,EAAkB,CAAlB,EAAoBsB,IAApB,CAAN;AAEC;;AAGD,OAAI,IAAItB,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACsB,IAAI,CAACQ,UAAL,CAAgB7C,MAA9B,EAAqCe,CAAC,EAAtC,EAAyC;AAGrC,QAAIsC,CAAC,GAAChB,IAAI,CAACQ,UAAL,CAAgB9B,CAAhB,CAAN;;AAEA,QAAGsC,CAAC,CAAC3D,IAAF,KAAS2C,IAAI,CAAC3C,IAAjB,EAAsB;AAElB2C,MAAAA,IAAI,CAAC5C,WAAL,CAAiBK,IAAjB,CAAsBuD,CAAtB;AACH;AAEJ;;AAIL,MAAGhB,IAAI,CAAC/C,QAAL,CAAcU,MAAd,KAAuB,CAA1B,EACI,OAAO,IAAP,CADJ,KAGI,OAAO,KAAP;AAIP,CA7FM;AAiGP,OAAO,MAAMoD,MAAM,GAAC,UAASC,CAAT,EAAWC,CAAX,EAAajB,IAAb,EAAkB;AAGlC,MAAItC,GAAG,GAAC,CAAR;AAEAsD,EAAAA,CAAC,CAAC3D,IAAF,GAAO4D,CAAP;;AAGA,OAAI,IAAIvC,CAAC,GAACsC,CAAC,CAACtD,GAAF,GAAM,CAAhB,EAAkBgB,CAAC,GAACsC,CAAC,CAAC9D,MAAF,CAASD,QAAT,CAAkBU,MAAtC,EAA6Ce,CAAC,EAA9C,EAAiD;AAIzC,QAAGsC,CAAC,CAAChE,IAAF,CAAO6D,SAAP,KAAmBG,CAAC,CAAC9D,MAAF,CAASD,QAAT,CAAkByB,CAAlB,EAAqB1B,IAArB,CAA0B6D,SAAhD,EAA0D;AAE1D,UAAGvC,YAAY,CAAC0C,CAAC,CAAChE,IAAF,CAAO8D,SAAR,EAAkBE,CAAC,CAAC9D,MAAF,CAASD,QAAT,CAAkByB,CAAlB,EAAqB1B,IAArB,CAA0B8D,SAA5C,CAAf,EACI;AAGIE,QAAAA,CAAC,CAAC1D,MAAF,CAAS0D,CAAC,CAAC9D,MAAF,CAASD,QAAT,CAAkByB,CAAlB,EAAqB1B,IAA9B;AACAU,QAAAA,GAAG;AAEN;AACJ;AAER;;AAAA;;AAID,MAAGA,GAAG,KAAG,CAAT,EAAiB;AACb;AACI,UAAGsC,IAAI,CAAC3C,IAAL,GAAU4D,CAAb,EACIjB,IAAI,CAAC3C,IAAL,GAAU4D,CAAV,CAFR,CAKI;;AACAD,MAAAA,CAAC,CAACvB,IAAF,GAAO,EAAP;AACA,UAAIyB,KAAK,GAACF,CAAV;;AACA,WAAI,IAAIrB,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACqB,CAAC,CAAC3D,IAAhB,EAAqBsC,CAAC,EAAtB,EAAyB;AAErBqB,QAAAA,CAAC,CAACvB,IAAF,CAAOhC,IAAP,CAAYyD,KAAZ;AACAA,QAAAA,KAAK,GAACA,KAAK,CAAChE,MAAZ;AAGH;;AAED8C,MAAAA,IAAI,CAACQ,UAAL,CAAgB/C,IAAhB,CAAqBuD,CAArB;AAGA;AAEH,KAtBL,MAuBK;AAED,SAAI,IAAItC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAChB,GAAd,EAAkBgB,CAAC,EAAnB,EACA;AACIsB,MAAAA,IAAI,CAACO,UAAL,CAAgB9C,IAAhB,CAAqBuD,CAAC,CAAC/D,QAAF,CAAWyB,CAAX,CAArB;AACAqC,MAAAA,MAAM,CAACC,CAAC,CAAC/D,QAAF,CAAWyB,CAAX,CAAD,EAAeuC,CAAC,GAAC,CAAjB,EAAmBjB,IAAnB,CAAN;AAEH;AAEJ;AAEJ,CA9DM;AAkEP,eAAelD,IAAf","sourcesContent":["\r\n\r\nexport class Node {\r\n\r\n    constructor(data){\r\n\r\n        this.data=data;\r\n        this.children=[];\r\n        this.adault=null;\r\n        this.score=0;\r\n        this.maxrootlist=[];\r\n        this.deep=0;\r\n       \r\n    \r\n    }\r\n\r\n\r\n   insert(data){\r\n\r\n    const node=new Node(data);\r\n    node.adault=this;\r\n    \r\n    node.score=node.adault.score+data.classscore;  // 누적 학점\r\n    \r\n    this.children.push(node);\r\n    node.num=this.children.length-1;\r\n\r\n    \r\n\r\n   }\r\n   \r\n}\r\n\r\nexport class classTree{\r\n\r\n    constructor(){\r\n        \r\n        \r\n        this.deep=0;\r\n        this.classlist=[];\r\n        this.children=[];\r\n        this.childinfo={max:0, maxleng:0};\r\n    }\r\n\r\n\r\n    insert(deep,classlist,type){\r\n\r\n        const tree=new classTree();\r\n\r\n        tree.type=type;\r\n        tree.deep=deep;\r\n        tree.classlist=classlist;\r\n        tree.adault=this;\r\n        this.children.push(tree);\r\n        tree.num=this.children.length-1;\r\n\r\n\r\n    }\r\n\r\n    insertinfo(max,maxleng){\r\n\r\n\r\n        this.childinfo.max=max;\r\n        this.childinfo.maxleng=maxleng;\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nconst typer=[\"type1\",\"type2\",\"type3\"];\r\nlet fflist=[];\r\n\r\n//둘의 시간이 겹치는지 확인\r\n//안겹치면 true 반환\r\n// 시간표를 넘겨줘야함\r\nexport const lookschedule= function(a,b){\r\n\r\n    if(a.t1.length && b.t1.length)\r\n        {   \r\n                for(let i=0;i<a.t1.length;i++){\r\n                    \r\n                    if(b.t1.indexOf(a.t1[i])!==-1)\r\n                        return false;\r\n                        \r\n                }\r\n\r\n        }\r\n\r\n    if(a.t2.length && b.t2.length)\r\n    {   \r\n            for(let i=0;i<a.t2.length;i++){\r\n                \r\n                if(b.t2.indexOf(a.t2[i])!==-1)\r\n                    return false;\r\n                    \r\n            }\r\n    }\r\n\r\n\r\n\r\n    if(a.t3.length && b.t3.length)\r\n    {   \r\n            for(let i=0;i<a.t3.length;i++){\r\n                \r\n                if(b.t3.indexOf(a.t3[i])!==-1)\r\n                    return false;\r\n                    \r\n            }\r\n    }\r\n\r\n    if(a.t4.length && b.t4.length)\r\n    {   \r\n            for(let i=0;i<a.t4.length;i++){\r\n                \r\n                if(b.t4.indexOf(a.t4[i])!==-1)\r\n                    return false;\r\n                 \r\n            }\r\n\r\n    }\r\n\r\n    if(a.t5.length && b.t5.length)\r\n    {   \r\n            for(let i=0;i<a.t5.length;i++){\r\n                \r\n                if(b.t5.indexOf(a.t5[i])!==-1)\r\n                    return false;\r\n                   \r\n            }\r\n\r\n    }\r\n\r\n\r\n    return true;\r\n\r\n\r\n\r\n};\r\n\r\n\r\n//banlist는 data 배열이어야함\r\nexport const mainTree=(table,banlist,specialbanlist)=>{\r\n\r\n    fflist=[];\r\n\r\n    const classroot=new classTree();\r\n\r\n\r\n    composeTree(classroot,table,banlist,0,specialbanlist);\r\n    \r\n\r\n    comparemain(classroot);\r\n\r\n    \r\n    analyze(classroot);\r\n\r\n\r\n    fflist=uniq(fflist);\r\n\r\n\r\n\r\n    return fflist;\r\n\r\n};\r\n\r\n\r\n//부분집합이 되는거 삭제\r\nexport const uniq=function(list){\r\n\r\n   \r\n\r\nfor(let i=0;i<list.length-1;i++){\r\n\r\n    if(list[i].id===-1)\r\n        continue;\r\n  \r\n\r\n    for(let j=i+1;j<list.length;j++){\r\n\r\n        if(list[j].id===-1)\r\n            continue;\r\n\r\n        let tf=uniqfunc(list[i],list[j]);\r\n\r\n        if(tf===0 || tf===1)\r\n            {   \r\n                list[j].id=-1;\r\n                \r\n            }\r\n\r\n        else if(tf===-1)\r\n            {   //i를 버려야함\r\n                list[i].id=-1;\r\n\r\n                break;\r\n            }\r\n        else if(tf===2)\r\n            {   // i랑 j 둘다 살림.\r\n                \r\n                continue;\r\n            \r\n            }\r\n\r\n\r\n    }\r\n\r\n}\r\n    \r\n\r\nlet bb=[];\r\nfor(let i=0;i<list.length;i++){\r\n\r\n    if(list[i].id!==-1)\r\n        bb.push(list[i]);\r\n\r\n\r\n}\r\n\r\n    return bb;\r\n\r\n\r\n\r\n};\r\n\r\nexport const uniqfunc=function(a,b){\r\n\r\n    let aa=a.length;\r\n    let bb=b.length;\r\n\r\n    for(let i=0;i<a.length;i++){\r\n\r\n        for(let j=0;j<b.length;j++){\r\n\r\n            if(a[i].id===b[j].id)\r\n                {   aa--;\r\n                    bb--;\r\n                    break;\r\n                }\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    if(aa===0 && bb===0)\r\n        return 0;\r\n    else if(aa>0 && bb===0)\r\n        return 1;\r\n    else if(aa===0 && bb>0)\r\n        return -1;\r\n    else if(aa>0 && bb>0)\r\n        return 2;\r\n\r\n\r\n};\r\n\r\n\r\nexport const analyze=function(root){\r\n\r\n\r\n    if(root.children.length!==0){\r\n      \r\n\r\n        for(let i=0;i<root.children.length;i++){\r\n\r\n            let list=[];\r\n            analyzetree(root.children[i],list);\r\n\r\n        }\r\n\r\n    }\r\n   \r\n\r\n\r\n};\r\n\r\n\r\nexport const analyzetree=function(root,list){\r\n\r\n       let alist=list.concat(root.classlist);\r\n\r\n     if(root.children.length===0)\r\n        {\r\n            fflist.push(alist);\r\n            return;\r\n        }\r\n\r\n    else{\r\n\r\n        for(let i=0;i<root.children.length;i++){\r\n\r\n            analyzetree(root.children[i],alist);\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n};\r\n\r\nexport const comparemain=function(root){\r\n\r\n    if(root.children.length===0)\r\n            return;\r\n\r\n      \r\n            for(let i=0;i<root.children.length-1;i++){\r\n        \r\n                for(let j=i+1;j<root.children.length;j++)\r\n                        {\r\n        \r\n                            if(compare(root.children[i],root.children[j])===-1)\r\n                                {\r\n                                        let temp=root.children[j];\r\n                                        root.children[j]=root.children[i];\r\n                                        root.children[i]=temp;\r\n                                    \r\n                                }\r\n        \r\n        \r\n        \r\n                        }\r\n        \r\n        \r\n            }\r\n\r\n\r\n            for(let i=0;i<root.children.length;i++){\r\n\r\n                comparemain(root.children[i]);\r\n\r\n\r\n            }\r\n\r\n\r\n};\r\n\r\n\r\nexport const compare=function(a,b){\r\n\r\n    if(a.deep>b.deep)\r\n        return 1;\r\n    if(a.deep<b.deep)\r\n        return -1;\r\n\r\n    if(a.deep===b.deep){\r\n         \r\n        \r\n        if(a.children.length===0 && b.children.length===0)\r\n            return 0;\r\n        else if(a.children.length===0 && b.children.length!==0)\r\n            return -1;\r\n        else if(a.children.length!==0 && b.children.length===0)\r\n            return 1;\r\n        else\r\n            {   \r\n                \r\n                if(a.childinfo.max>b.childinfo.max)\r\n                    return 1;\r\n                if(a.childinfo.max<b.childinfo.max)\r\n                    return -1;\r\n           \r\n                if(a.childinfo.maxleng>b.childinfo.maxleng)\r\n                    return 1;\r\n                else if(a.childinfo.maxleng<b.childinfo.maxleng)\r\n                    return -1;\r\n                else \r\n                    return 0;\r\n                \r\n                    \r\n            }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n};\r\n\r\nexport const composeTree=function(classroot,table,banlist,index,specialbanlist){\r\n\r\n    const root= new Node();\r\n\r\n    root.memberlist=[];\r\n    root.finalTable=[];\r\n\r\n     \r\n\r\n\r\n\r\n        if(exbanlist(typer[index],table,banlist,root,specialbanlist)){\r\n\r\n\r\n             classroot.insertinfo(root.deep,root.maxrootlist.length);\r\n         \r\n                    for(let i=0;i<root.memberlist.length;i++){\r\n                        let temp=root.memberlist[i];\r\n                        let tempdata=[];\r\n\r\n                      \r\n\r\n                        for(let j=0;j<root.memberlist[i].deep;j++){\r\n                                \r\n                                tempdata.push(temp.data);\r\n                    \r\n                                temp=temp.adault;\r\n\r\n                                \r\n                        }\r\n\r\n                        \r\n                        classroot.insert(root.memberlist[i].deep,tempdata,typer[index]);\r\n                        \r\n                        if(index<typer.length-1){\r\n                           \r\n                        let addbanlist=banlist.concat(tempdata);\r\n                        composeTree(classroot.children[i],table,addbanlist,index+1,specialbanlist);\r\n                            \r\n                        }\r\n\r\n                        else\r\n                            return;\r\n\r\n                    }\r\n\r\n\r\n        \r\n\r\n        }\r\n\r\n        else{\r\n\r\n            if(index<typer.length-1)\r\n                composeTree(classroot,table,banlist,index+1,specialbanlist);\r\n            \r\n            else\r\n                return;\r\n\r\n\r\n        }\r\n\r\n      \r\n        \r\n        \r\n\r\n    };\r\n     \r\n            \r\n\r\n// type과 table에서 banlist를 주면 root에 알아서 목록을 집어넣어준다 \r\nexport const exbanlist=(type,table,banlist,root,specialbanlist)=>{\r\n\r\n   \r\n    for(let i=0;i<table[type].length;i++){\r\n\r\n    \r\n        if(banlist.length===0){\r\n\r\n            let t=0;\r\n            for(let j=0;j<specialbanlist.length;j++){\r\n\r\n                if(table[type][i].id!==specialbanlist[j].id)\r\n                    t++;\r\n\r\n\r\n            }\r\n            \r\n            if(t===specialbanlist.length)\r\n                 root.insert(table[type][i]);\r\n        }\r\n    else {\r\n        let t=0;\r\n      \r\n        for( let j=0;j<banlist.length;j++){\r\n\r\n            if(banlist[j].classname!==table[type][i].classname)\r\n            {\r\n                if(lookschedule(banlist[j].classtime,table[type][i].classtime))\r\n                   {\r\n                        t++;\r\n\r\n                   }\r\n                \r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n\r\n        if(t===banlist.length)\r\n            {\r\n                t=0;\r\n                for(let j=0;j<specialbanlist.length;j++){\r\n\r\n                    if(table[type][i].id!==specialbanlist[j].id)\r\n                        t++;\r\n    \r\n    \r\n                }\r\n                \r\n                if(t===specialbanlist.length)\r\n                root.insert(table[type][i]);\r\n            \r\n            \r\n            }\r\n\r\n      \r\n    }\r\n\r\n      \r\n    }\r\n\r\n    \r\n    for(let i=0;i<root.children.length;i++){\r\n\r\n        root.memberlist.push(root.children[i]);\r\n        search(root.children[i],1,root);\r\n\r\n        }\r\n\r\n\r\n        for(let i=0;i<root.finalTable.length;i++){\r\n\r\n            \r\n            let n=root.finalTable[i];\r\n    \r\n            if(n.deep===root.deep){\r\n    \r\n                root.maxrootlist.push(n);\r\n            }\r\n    \r\n        }\r\n     \r\n\r\n\r\n    if(root.children.length!==0)\r\n        return true;\r\n    else    \r\n        return false;\r\n\r\n\r\n\r\n};\r\n\r\n\r\n\r\nexport const search=function(n,k,root){\r\n\r\n \r\n    let num=0;\r\n\r\n    n.deep=k;\r\n    \r\n\r\n    for(let i=n.num+1;i<n.adault.children.length;i++){\r\n\r\n        \r\n\r\n            if(n.data.classname!==n.adault.children[i].data.classname){\r\n\r\n            if(lookschedule(n.data.classtime,n.adault.children[i].data.classtime))\r\n                {   \r\n                    \r\n                   \r\n                    n.insert(n.adault.children[i].data);\r\n                    num++;\r\n\r\n                }\r\n            }\r\n                   \r\n    };\r\n\r\n\r\n\r\n    if(num===0)      //지금 이 노드가 leaf라는 소리\r\n        {   \r\n            if(root.deep<k)\r\n                root.deep=k;\r\n            \r\n\r\n            // 리프는 root->자기로 향하는 노드들의 리스트를 따로 저장함.\r\n            n.list=[];\r\n            let tempn=n;\r\n            for(let j=0;j<n.deep;j++){\r\n\r\n                n.list.push(tempn);\r\n                tempn=tempn.adault;\r\n\r\n\r\n            }\r\n\r\n            root.finalTable.push(n);\r\n\r\n\r\n            return;\r\n\r\n        }\r\n    else {\r\n\r\n        for(let i=0;i<num;i++)\r\n        {   \r\n            root.memberlist.push(n.children[i]);\r\n            search(n.children[i],k+1,root);\r\n\r\n        }\r\n\r\n    }\r\n\r\n};\r\n\r\n\r\n\r\nexport default Node;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}