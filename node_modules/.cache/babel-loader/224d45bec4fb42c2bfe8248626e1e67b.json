{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\ReactProject\\\\sugang-scheduler\\\\sugang-frontend\\\\src\\\\containers\\\\graph\\\\GraphContainer.js\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport Graph from '../../component/graph/Graph';\nimport { register } from '../../modules/write';\nimport Node, { lookschedule, insertTable, composeTree, search } from '../../lib/tree/tree';\nimport { tsConstructorType } from '../../../../../../../AppData/Local/Microsoft/TypeScript/3.7/node_modules/@babel/types/lib/index'; // 안겹친다는 가정이 필요\n// 안겹치고 이 함수를 사용하면 dst 시간표에 src가 추가됨. \n// 시간표와, 시간표에 넣을 과목을 dst, src 차례로 주면됨\n//const insertTable=function(dst,src)\n\nclass mNode {\n  constructor(list) {\n    this.children = [];\n    this.classlist = list;\n  }\n\n  insert(list) {\n    let node = new mNode(list);\n    this.children[this.children.length] = node;\n  }\n\n}\n\n;\n\nconst GraphContainer = () => {\n  const [TdrawList, setTdrawList] = useState([]);\n  const [allList, setallList] = useState([]);\n  const [makingdrawList, setmakingdrawList] = useState([]);\n  const [nownum, setnownum] = useState(0);\n  const [addlist, setaddlist] = useState([]);\n\n  const Delete = id => {\n    const aa = TdrawList.filter(e => e.id !== id);\n    setTdrawList(aa);\n    let addtemp = [];\n    let addid = 0;\n\n    for (let i = 0; i < aa.length; i++) {\n      for (let j = 0; j < type1.length; j++) {\n        if (aa[i].data.classname !== type1[j].classname) {\n          if (lookschedule(aa[i].data.classtime, type1[j].classtime)) {\n            addtemp.push({ ...type1[j],\n              id: addid\n            });\n            addid++;\n          }\n        }\n      }\n\n      for (let j = 0; j < type2.length; j++) {\n        if (aa[i].data.classname !== type2[j].classname) {\n          if (lookschedule(aa[i].data.classtime, type2[j].classtime)) {\n            addtemp.push({ ...type2[j],\n              id: addid\n            });\n            addid++;\n          }\n        }\n      }\n\n      for (let j = 0; j < type3.length; j++) {\n        if (aa[i].data.classname !== type3[j].classname) {\n          if (lookschedule(aa[i].data.classtime, type3[j].classtime)) {\n            addtemp.push({ ...type3[j],\n              id: addid\n            });\n            addid++;\n          }\n        }\n      }\n    }\n\n    setaddlist(addtemp);\n  }; // const dispatch = useDispatch();\n\n\n  const {\n    type1,\n    type2,\n    type3\n  } = useSelector(({\n    write\n  }) => ({\n    type1: write.type1,\n    type2: write.type2,\n    type3: write.type3\n  }));\n  const Maintable = {\n    type1,\n    type2,\n    type3\n  };\n  useEffect(() => makingDrawList(), [TdrawList]);\n  useEffect(() => finalprint(), [allList]); // 배열로 시간표 리스트만 넘기면됨 \n\n  const makingDrawList = useCallback(() => {\n    let makingTable = [];\n\n    for (let i = 0; i < TdrawList.length; i++) {\n      // 한 과목씩 살펴봄\n      for (let j = 0; j < TdrawList[i].data.classtime.keyword.length; j++) {\n        // 한 과목의 요일수\n        let day;\n\n        switch (TdrawList[i].data.classtime.keyword[j]) {\n          case 't1':\n            day = 5;\n            break;\n\n          case 't2':\n            day = 24;\n            break;\n\n          case 't3':\n            day = 43;\n            break;\n\n          case 't4':\n            day = 62;\n            break;\n\n          case 't5':\n            day = 81;\n            break;\n\n          default:\n            break;\n        }\n\n        let dayarr = TdrawList[i].data.classtime[TdrawList[i].data.classtime.keyword[j]]; // 요일 배열\n\n        let timeleng = dayarr.length * 3.5;\n        let time = 9 + (dayarr[0] - 2) * 3.5;\n        makingTable.push({\n          x: day,\n          y: time,\n          ycolor: timeleng,\n          color: \"#CEF6F5\",\n          text: TdrawList[i].data.classname\n        });\n      }\n    }\n\n    console.log(makingTable);\n    setmakingdrawList(makingTable);\n  }, [TdrawList]); //개수기반\n  //우선순위 1개수가 같으면 일단 그거 다출력\n  // node 클래스\n  // root,일반,leaf마다 가진 요소가 다름\n\n  const Calculate = () => {\n    //   let finalrank=[]; //최종 개수 기반 순위\n    const root1 = composeTree('type1', Maintable); // 최대개수인 리프노드들을 찾아서 maxrootlist 배열에 저장되어있음.\n    // 트리를 만듬. (1순위 리스트)\n\n    let treerootlist = []; // 루트 트리들의 배열\n\n    for (let i = 0; i < root1.maxrootlist.length; i++) {\n      let treeroot = new mNode(root1.maxrootlist[i].list); // 하나의 루트트리를 만듬.\n\n      treerootlist.push(treeroot); // 배열에 넣음\n      // 그다음 2순위 찾음\n\n      let root2 = composeTree('type2', Maintable, treeroot.classlist);\n\n      for (let j = 0; j < root2.maxrootlist.length; j++) {\n        treeroot.insert(root2.maxrootlist[j].list);\n        let treeroot2 = treeroot.children[j];\n        let classlist = treeroot.classlist.concat(root2.maxrootlist[j].list);\n        let root3 = composeTree('type3', Maintable, classlist); // 3순위 찾음\n\n        for (let k = 0; k < root3.maxrootlist.length; k++) {\n          treeroot2.insert(root3.maxrootlist[k].list);\n        }\n      }\n    } // for문 끝 \n    // 모든 리스트가 만들어짐.\n    // 이제 순위를 매김\n    // 1순위는 어차피 다 같을테니\n    //treerootlist에 트리가 다 들어있음\n    // 1,2,3등분으로 나눈다면\n    // 일단 1끼리 순위결정을 한다 \n    // 결정되면 다시 2내에서 순위결정\n    // 결정되면 다시 3내에서 순위결정\n    //그럼  1순위끼리는 어떻게 우선순위를 나누냐\n    // 비교함수를 만들었음 . compare(a,b)  a가크면 1 b가크면 -1 같으면 0\n    //퀵소트로 비교하면됨.\n    //1 정립 \n\n\n    for (let i = 0; i < treerootlist.length - 1; i++) {\n      for (let j = 1; j < treerootlist.length; j++) {\n        let b = compare(treerootlist[i], treerootlist[j]);\n\n        if (b === -1) {\n          let c = treerootlist[j];\n          treerootlist[j] = treerootlist[i];\n          treerootlist[i] = c;\n        }\n      }\n    } //2 정립\n\n\n    for (let i = 0; i < treerootlist.length; i++) {\n      for (let j = 0; j < treerootlist[i].children.length - 1; j++) {\n        for (let k = 1; k < treerootlist[i].children.length; k++) {\n          let b = compare(treerootlist[i].children[j], treerootlist.children[k]);\n\n          if (b === -1) {\n            let c = treerootlist[i].children[k];\n            treerootlist[i].children[k] = treerootlist[i].children[j];\n            treerootlist[i].children[j] = c;\n          }\n        }\n      }\n\n      for (let j = 0; j < treerootlist[i].children.length; j++) {\n        for (let a = 0; a < treerootlist[i].children[j].children.length - 1; a++) {\n          for (let b = 1; b < treerootlist[i].children[j].children.length; b++) {\n            let x = compare(treerootlist[i].children[j].children[a], treerootlist[i].children[j].children[b]);\n\n            if (x === -1) {\n              let y = treerootlist[i].children[j].children[b];\n              treerootlist[i].children[j].children[b] = treerootlist[i].children[j].children[a];\n              treerootlist[i].children[j].children[a] = y;\n            }\n          }\n        }\n      }\n    }\n\n    let finaldata = [];\n\n    for (let a = 0; a < treerootlist.length; a++) {\n      if (treerootlist[a].children.length === 0) {\n        finaldata.push(treerootlist[a].classlist);\n        continue;\n      }\n\n      for (let b = 0; b < treerootlist[a].children.length; b++) {\n        if (treerootlist[a].children[b].children.length === 0) {\n          finaldata.push(treerootlist[a].classlist.concat(treerootlist[a].children[b].classlist));\n          continue;\n        }\n\n        for (let c = 0; c < treerootlist[a].children[b].children.length; c++) {\n          let x = treerootlist[a].classlist.concat(treerootlist[a].children[b].classlist);\n          let y = x.concat(treerootlist[a].children[b].children[c].classlist); // let temp=[];\n          // for(let z=0;z<y.length;z++){\n          //     temp.push(y[z].data);\n          // }   \n          // if(temp.length>0){\n          //     finaldata.push(temp);\n          // }\n\n          finaldata.push(y);\n        }\n      }\n    }\n\n    setallList(finaldata);\n    return finaldata;\n  };\n\n  const finalprint = () => {\n    let kkk = [];\n\n    if (allList.length !== 0) {\n      for (let i = 0; i < allList[nownum].length; i++) {\n        let tt = allList[nownum][i];\n        tt = { ...tt,\n          id: i\n        };\n        kkk.push(tt);\n      }\n\n      setTdrawList(kkk);\n    }\n  };\n\n  const next = () => {\n    if (allList.length - 1 === nownum) {\n      setnownum(0);\n    } else {\n      setnownum(nownum + 1);\n    }\n\n    finalprint();\n  };\n\n  const previous = () => {\n    if (nownum > 0) {\n      setnownum(nownum - 1);\n      finalprint();\n    }\n  }; //TdrawList = {} 배열 []\n  // { id , n (노드)    }\n  // 1반환: a가 더큼\n  //0반환: 둘이 같음\n  //-1반환:b가 더큼\n\n\n  const compare = (a, b) => {\n    if (a.children.length === 0) {\n      if (b.children.length > 0) return -1;else return 0;\n    }\n\n    if (b.children.length === 0) {\n      if (a.children.length > 0) return 1;else return 0;\n    }\n\n    if (a.children[0].classlist[0].deep > b.children[0].classlist[0].deep) return 1;else if (a.children[0].classlist[0].deep < b.children[0].classlist[0].deep) return -1;else {\n      if (a.children.length > b.children.length) return 1;else if (a.children.length < b.children.length) return -1;else return 0;\n    }\n  };\n\n  const onCalculate = () => {\n    const root = composeTree('type1', Maintable, []);\n    let maxScoreTable = [];\n    let maxTable = [];\n\n    for (let i = 0; i < root.finalTable.length; i++) {\n      let n = root.finalTable[i];\n\n      if (n.score === root.maxScore) {\n        maxScoreTable.push(n);\n      }\n\n      if (n.deep === root.max) {\n        maxTable.push(n);\n      }\n    }\n\n    console.log('&&&&&&&&&&&&&&&학점 우선 시간표&&&&&&&&&&&&&&');\n\n    for (let i = 0; i < maxScoreTable.length; i++) {\n      let n = maxScoreTable[i];\n      let k = n.deep;\n      console.log('--------%d번째 시간표----------', i + 1);\n\n      for (let j = 0; j < k; j++) {\n        console.log('%d:%s %s %d ', j + 1, n.data.classname, n.data.profess, n.data.classscore);\n        n = n.adault;\n      }\n\n      console.log('[총 %d학점]', root.maxScore);\n      console.log('---------------------------');\n    }\n\n    console.log('&&&&&&&&&&&&&&&과목개수 우선 시간표&&&&&&&&&&&&&&');\n\n    for (let i = 0; i < maxTable.length; i++) {\n      let n = maxTable[i];\n      let a = n.score;\n      console.log('--------%d번째 시간표----------', i + 1);\n\n      for (let j = 0; j < root.max; j++) {\n        console.log('%d:%s %s %d', j + 1, n.data.classname, n.data.profess, n.data.classscore);\n        n = n.adault;\n      }\n\n      console.log('[총%d학점]', a);\n      console.log('---------------------------');\n    }\n\n    let a = maxTable[0];\n    let bb = [];\n\n    for (let i = 0; i < root.max; i++) {\n      bb.push(a.data);\n      a = a.adault;\n    }\n\n    makingDrawList(bb);\n  };\n\n  return React.createElement(Graph, {\n    onCalculate: onCalculate,\n    TdrawList: TdrawList,\n    Delete: Delete,\n    makingdrawList: makingdrawList,\n    Calculate: Calculate,\n    next: next,\n    previous: previous,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 585\n    },\n    __self: this\n  });\n};\n\nexport default GraphContainer;","map":{"version":3,"sources":["C:/Users/user/Desktop/ReactProject/sugang-scheduler/sugang-frontend/src/containers/graph/GraphContainer.js"],"names":["React","useState","useCallback","useEffect","useSelector","useDispatch","withRouter","Graph","register","Node","lookschedule","insertTable","composeTree","search","tsConstructorType","mNode","constructor","list","children","classlist","insert","node","length","GraphContainer","TdrawList","setTdrawList","allList","setallList","makingdrawList","setmakingdrawList","nownum","setnownum","addlist","setaddlist","Delete","id","aa","filter","e","addtemp","addid","i","j","type1","data","classname","classtime","push","type2","type3","write","Maintable","makingDrawList","finalprint","makingTable","keyword","day","dayarr","timeleng","time","x","y","ycolor","color","text","console","log","Calculate","root1","treerootlist","maxrootlist","treeroot","root2","treeroot2","concat","root3","k","b","compare","c","a","finaldata","kkk","tt","next","previous","deep","onCalculate","root","maxScoreTable","maxTable","finalTable","n","score","maxScore","max","profess","classscore","adault","bb"],"mappings":"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","sourcesContent":["\r\nimport React , {useState,useCallback,useEffect} from 'react';\r\nimport {useSelector,useDispatch} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom';\r\nimport Graph from '../../component/graph/Graph';\r\n\r\nimport {register} from '../../modules/write';\r\n\r\nimport Node ,{lookschedule,insertTable,composeTree ,search} from '../../lib/tree/tree';\r\nimport { tsConstructorType } from '../../../../../../../AppData/Local/Microsoft/TypeScript/3.7/node_modules/@babel/types/lib/index';\r\n\r\n\r\n// 안겹친다는 가정이 필요\r\n// 안겹치고 이 함수를 사용하면 dst 시간표에 src가 추가됨. \r\n// 시간표와, 시간표에 넣을 과목을 dst, src 차례로 주면됨\r\n//const insertTable=function(dst,src)\r\n\r\nclass mNode{\r\n\r\n    children=[];\r\n    \r\n    constructor(list){\r\n\r\n        \r\n        this.classlist=list;\r\n\r\n    }\r\n \r\n    insert(list){\r\n        let node=new mNode(list);\r\n\r\n        this.children[this.children.length]=node;\r\n        \r\n\r\n    }\r\n\r\n\r\n};\r\n\r\n\r\n\r\nconst GraphContainer=()=>{\r\n\r\n\r\n    const [TdrawList,setTdrawList]=useState([]);\r\n\r\n    const [allList,setallList]=useState([]);\r\n\r\n    const [makingdrawList,setmakingdrawList]=useState([]);\r\n\r\n    const [nownum,setnownum]=useState(0);\r\n\r\n    const [addlist,setaddlist]=useState([]);\r\n\r\n\r\n    const Delete=(id)=>{\r\n\r\n       const  aa=TdrawList.filter(e=>(e.id!==id));\r\n       \r\n       setTdrawList(aa);\r\n\r\n       let addtemp=[];\r\n       let addid=0;\r\n       for(let i=0;i<aa.length;i++){\r\n\r\n       for(let j=0;j<type1.length;j++){\r\n\r\n        if(aa[i].data.classname!==type1[j].classname){\r\n\r\n            if(lookschedule(aa[i].data.classtime,type1[j].classtime)){\r\n\r\n\r\n                addtemp.push({...type1[j] ,id:addid});\r\n                addid++;\r\n            }\r\n\r\n\r\n        }\r\n        \r\n       }\r\n\r\n       for(let j=0;j<type2.length;j++){\r\n\r\n        if(aa[i].data.classname!==type2[j].classname){\r\n\r\n            if(lookschedule(aa[i].data.classtime,type2[j].classtime)){\r\n\r\n\r\n                addtemp.push({...type2[j],id:addid});\r\n                addid++;\r\n\r\n            }\r\n\r\n\r\n        }\r\n        \r\n       }\r\n\r\n       for(let j=0;j<type3.length;j++){\r\n\r\n        if(aa[i].data.classname!==type3[j].classname){\r\n\r\n            if(lookschedule(aa[i].data.classtime,type3[j].classtime)){\r\n\r\n\r\n                addtemp.push({...type3[j],id:addid});\r\n                    addid++;\r\n                    \r\n            }\r\n\r\n\r\n        }\r\n        \r\n       }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n       \r\n\r\n        setaddlist(addtemp);\r\n          \r\n      };\r\n\r\n      \r\n\r\n    \r\n      \r\n      \r\n    \r\n\r\n    // const dispatch = useDispatch();\r\n\r\n    const {type1,type2,type3}=useSelector(({write})=>({\r\n\r\n       type1:write.type1,\r\n       type2:write.type2,\r\n       type3:write.type3,\r\n    }\r\n    )); \r\n\r\n    const Maintable={\r\n        type1,type2,type3\r\n    };\r\n    \r\n\r\n\r\nuseEffect(()=>makingDrawList(),[TdrawList]);\r\nuseEffect(()=>finalprint(),[allList]);\r\n\r\n    // 배열로 시간표 리스트만 넘기면됨 \r\n    const makingDrawList=useCallback(()=>{\r\n\r\n        let makingTable=[];\r\n\r\n        for(let i=0;i<TdrawList.length;i++){  // 한 과목씩 살펴봄\r\n\r\n            for(let j=0;j<TdrawList[i].data.classtime.keyword.length;j++){  // 한 과목의 요일수\r\n                \r\n                let day;\r\n\r\n                switch(TdrawList[i].data.classtime.keyword[j]){\r\n                    case 't1': day=5; break;\r\n                    case 't2': day=24; break;\r\n                    case 't3': day=43; break;\r\n                    case 't4': day=62; break;\r\n                    case 't5': day=81; break;\r\n                    default: break;\r\n\r\n                }\r\n\r\n              \r\n\r\n              let dayarr=  TdrawList[i].data.classtime[TdrawList[i].data.classtime.keyword[j]]; // 요일 배열\r\n                \r\n              let timeleng=dayarr.length * 3.5;\r\n              let time=9+((dayarr[0]-2)*3.5);\r\n\r\n                makingTable.push({x:day,y:time,ycolor:timeleng,color:\"#CEF6F5\",text:TdrawList[i].data.classname});\r\n            \r\n            }\r\n\r\n\r\n        }\r\n        \r\n        console.log(makingTable);\r\n        setmakingdrawList(makingTable);\r\n\r\n\r\n    },[TdrawList]);\r\n\r\n    \r\n    //개수기반\r\n    //우선순위 1개수가 같으면 일단 그거 다출력\r\n\r\n    // node 클래스\r\n    // root,일반,leaf마다 가진 요소가 다름\r\n    \r\n\r\n    const Calculate=()=>{\r\n\r\n     //   let finalrank=[]; //최종 개수 기반 순위\r\n\r\n\r\n        const root1=composeTree('type1',Maintable);\r\n        \r\n        // 최대개수인 리프노드들을 찾아서 maxrootlist 배열에 저장되어있음.\r\n     \r\n\r\n        // 트리를 만듬. (1순위 리스트)\r\n\r\n        let treerootlist=[]; // 루트 트리들의 배열\r\n\r\n        for(let i=0;i<root1.maxrootlist.length;i++){\r\n\r\n            let treeroot=new mNode(root1.maxrootlist[i].list); // 하나의 루트트리를 만듬.\r\n            treerootlist.push(treeroot); // 배열에 넣음\r\n            \r\n            \r\n            // 그다음 2순위 찾음\r\n\r\n            let root2=composeTree('type2',Maintable,treeroot.classlist); \r\n            \r\n            for(let j=0;j<root2.maxrootlist.length;j++){\r\n     \r\n                treeroot.insert(root2.maxrootlist[j].list);\r\n                \r\n                let treeroot2=treeroot.children[j];\r\n                \r\n                let classlist=treeroot.classlist.concat(root2.maxrootlist[j].list);\r\n\r\n                let root3=composeTree('type3',Maintable,classlist);\r\n                \r\n\r\n                // 3순위 찾음\r\n                for(let k=0;k<root3.maxrootlist.length;k++){\r\n\r\n                    treeroot2.insert(root3.maxrootlist[k].list);\r\n\r\n                }\r\n            \r\n            \r\n            }\r\n            \r\n\r\n\r\n\r\n\r\n        }// for문 끝 \r\n       \r\n        // 모든 리스트가 만들어짐.\r\n        // 이제 순위를 매김\r\n        // 1순위는 어차피 다 같을테니\r\n        \r\n        //treerootlist에 트리가 다 들어있음\r\n        \r\n        // 1,2,3등분으로 나눈다면\r\n        // 일단 1끼리 순위결정을 한다 \r\n        // 결정되면 다시 2내에서 순위결정\r\n        // 결정되면 다시 3내에서 순위결정\r\n\r\n\r\n        //그럼  1순위끼리는 어떻게 우선순위를 나누냐\r\n        \r\n        // 비교함수를 만들었음 . compare(a,b)  a가크면 1 b가크면 -1 같으면 0\r\n\r\n        //퀵소트로 비교하면됨.\r\n\r\n        \r\n       //1 정립 \r\n\r\n        for(let i=0;i<treerootlist.length-1;i++){\r\n\r\n\r\n            for(let j=1;j<treerootlist.length;j++)\r\n            {\r\n                let b=compare(treerootlist[i],treerootlist[j])\r\n                \r\n                if(b===-1)\r\n                    {\r\n                        let c=treerootlist[j];\r\n                        treerootlist[j]=treerootlist[i];\r\n                        treerootlist[i]=c;\r\n                    \r\n                    }\r\n\r\n            }\r\n        \r\n        }\r\n\r\n        //2 정립\r\n\r\n        for(let i=0;i<treerootlist.length;i++){\r\n\r\n            for(let j=0;j<treerootlist[i].children.length-1;j++){\r\n\r\n                for(let k=1;k<treerootlist[i].children.length;k++){\r\n\r\n                    let b=compare(treerootlist[i].children[j],treerootlist.children[k]);\r\n\r\n                    if(b===-1){\r\n\r\n                        let c=treerootlist[i].children[k];\r\n                        treerootlist[i].children[k]=treerootlist[i].children[j];\r\n                        treerootlist[i].children[j]=c;\r\n                    }\r\n\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n            for(let j=0;j<treerootlist[i].children.length;j++){\r\n\r\n                for(let a=0;a<treerootlist[i].children[j].children.length-1;a++){\r\n\r\n                    for(let b=1;b<treerootlist[i].children[j].children.length;b++){\r\n\r\n                            let x=compare(treerootlist[i].children[j].children[a],treerootlist[i].children[j].children[b]);\r\n                            if(x===-1){\r\n\r\n                                let y=treerootlist[i].children[j].children[b];\r\n                                treerootlist[i].children[j].children[b]= treerootlist[i].children[j].children[a];\r\n                                treerootlist[i].children[j].children[a]=y;\r\n\r\n                            }\r\n\r\n\r\n\r\n                    }\r\n                }\r\n                \r\n            }\r\n\r\n\r\n\r\n        }\r\n                \r\n        \r\n        let finaldata=[];\r\n\r\n        for(let a=0;a<treerootlist.length;a++){\r\n\r\n                if(treerootlist[a].children.length===0){\r\n\r\n                        finaldata.push(treerootlist[a].classlist);\r\n                        continue;\r\n\r\n                }\r\n          \r\n            for(let b=0;b<treerootlist[a].children.length;b++){\r\n\r\n                    if(treerootlist[a].children[b].children.length===0){\r\n\r\n                        finaldata.push(treerootlist[a].classlist.concat(treerootlist[a].children[b].classlist));\r\n                        continue;\r\n                    }\r\n             \r\n                for(let c=0;c<treerootlist[a].children[b].children.length;c++){\r\n                        \r\n                    let x=treerootlist[a].classlist.concat(treerootlist[a].children[b].classlist);\r\n                    let y=x.concat(treerootlist[a].children[b].children[c].classlist);\r\n                    \r\n                    // let temp=[];\r\n                    // for(let z=0;z<y.length;z++){\r\n\r\n                    //     temp.push(y[z].data);\r\n                        \r\n\r\n                    // }   \r\n                    // if(temp.length>0){\r\n\r\n                    //     finaldata.push(temp);\r\n                    // }\r\n                    \r\n                    finaldata.push(y);\r\n\r\n                }\r\n\r\n            }\r\n\r\n            \r\n        \r\n\r\n\r\n\r\n\r\n        }\r\n        \r\n    \r\n       \r\n        setallList(finaldata);\r\n    \r\n        return finaldata;\r\n    }\r\n\r\n    const finalprint=()=>{\r\n\r\n        let kkk=[];\r\n        if(allList.length!==0){\r\n\r\n            \r\n\r\n        for(let i=0;i<allList[nownum].length;i++){\r\n\r\n            let tt=allList[nownum][i];\r\n\r\n            tt={...tt,id:i};\r\n\r\n            kkk.push(tt);\r\n\r\n\r\n        }\r\n\r\n        setTdrawList(kkk);\r\n\r\n    }\r\n\r\n    };\r\n    \r\n\r\n    const next=()=>{\r\n\r\n        if(allList.length -1 === nownum  ){\r\n\r\n            setnownum(0);\r\n\r\n           \r\n        }\r\n\r\n        else {\r\n\r\n            setnownum(nownum+1);\r\n            \r\n\r\n        }\r\n finalprint();\r\n\r\n    };\r\n\r\n    const previous=()=>{\r\n\r\n        if(nownum>0){\r\n\r\n            setnownum(nownum-1);\r\n            finalprint();\r\n\r\n        }\r\n\r\n        \r\n\r\n    };\r\n\r\n    //TdrawList = {} 배열 []\r\n    // { id , n (노드)    }\r\n\r\n\r\n    // 1반환: a가 더큼\r\n    //0반환: 둘이 같음\r\n    //-1반환:b가 더큼\r\n    const compare=(a,b)=>{\r\n\r\n        if(a.children.length===0)\r\n        {\r\n            if(b.children.length>0)\r\n                return -1;\r\n            else\r\n                return 0;\r\n\r\n        }\r\n\r\n        if(b.children.length===0){\r\n\r\n            if(a.children.length>0)\r\n                return 1;\r\n            else    \r\n                return 0;\r\n        }\r\n\r\n        if(a.children[0].classlist[0].deep > b.children[0].classlist[0].deep)\r\n            return 1;\r\n        else if(a.children[0].classlist[0].deep < b.children[0].classlist[0].deep)\r\n            return -1;\r\n        else\r\n            {\r\n                if(a.children.length > b.children.length)\r\n                    return 1;\r\n                else if(a.children.length < b.children.length)\r\n                    return -1;\r\n                else\r\n                    return 0;\r\n\r\n\r\n            }\r\n        \r\n\r\n\r\n    };\r\n\r\n    const onCalculate=()=>{\r\n        \r\n        const root= composeTree('type1',Maintable,[]);\r\n        \r\n         \r\n         let maxScoreTable=[];\r\n         let maxTable=[];\r\n     \r\n         for(let i=0;i<root.finalTable.length;i++){\r\n     \r\n             let n=root.finalTable[i];\r\n     \r\n            if(n.score===root.maxScore){\r\n     \r\n             maxScoreTable.push(n);\r\n     \r\n     \r\n            }    \r\n     \r\n     \r\n            if(n.deep===root.max){\r\n     \r\n             maxTable.push(n);\r\n            }\r\n     \r\n         }\r\n         console.log('&&&&&&&&&&&&&&&학점 우선 시간표&&&&&&&&&&&&&&');\r\n         for(let i=0;i<maxScoreTable.length;i++){\r\n     \r\n             let n=maxScoreTable[i];\r\n             let k=n.deep;\r\n             console.log('--------%d번째 시간표----------',i+1);\r\n             for(let j=0;j<k;j++){\r\n     \r\n                 console.log('%d:%s %s %d ',j+1,n.data.classname,n.data.profess,n.data.classscore);\r\n     \r\n                 n=n.adault;\r\n             }\r\n     \r\n             console.log('[총 %d학점]',root.maxScore);\r\n             console.log('---------------------------');\r\n     \r\n         }\r\n     \r\n     \r\n         console.log('&&&&&&&&&&&&&&&과목개수 우선 시간표&&&&&&&&&&&&&&');\r\n     \r\n        for(let i=0;i<maxTable.length;i++)\r\n        {\r\n            let n=maxTable[i];\r\n            let a=n.score;\r\n            console.log('--------%d번째 시간표----------',i+1);\r\n             for(let j=0;j<root.max;j++)\r\n             {   \r\n                \r\n                 console.log('%d:%s %s %d',j+1 ,n.data.classname,n.data.profess,n.data.classscore);\r\n                 n=n.adault;\r\n     \r\n             }\r\n             console.log('[총%d학점]',a);\r\n             console.log('---------------------------');\r\n        }\r\n        \r\n        let a=maxTable[0];\r\n        let bb=[];\r\n        for(let i=0;i<root.max;i++){\r\n\r\n            bb.push(a.data);\r\n            a=a.adault;\r\n\r\n\r\n        }\r\n        makingDrawList(bb);\r\n\r\n\r\n     };\r\n\r\n     \r\n\r\n\r\n    return (\r\n        <Graph onCalculate={onCalculate}\r\n            TdrawList={TdrawList}\r\n            Delete={Delete}\r\n            makingdrawList={makingdrawList}\r\n            Calculate={Calculate}\r\n            next={next}\r\n            previous={previous}\r\n            >\r\n\r\n            </Graph>\r\n    );\r\n\r\n\r\n};\r\n\r\n\r\nexport default GraphContainer;"]},"metadata":{},"sourceType":"module"}